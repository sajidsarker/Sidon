<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Debug
    show_debug_overlay(false);

    // Cache
    myCache = ds_list_create();

    // Input
    myKeyboard = CKeyboard;
    myGamepad  = CGamepad;

    if (instance_exists(CController)) {
        myController = CController;
    } else {
        myController = noone;
    }

    myInput = myKeyboard;

    // Timer
    theTimer = 0;
    theCounter = 0;

    // Node Map
    random_set_seed(current_second * current_day);
    CreateNodeMap();
    SpawnNode(random(room_width), random(room_height), "Medrez");
    SpawnNode(random(room_width), random(room_height), "Abzu");
    SpawnNode(random(room_width), random(room_height), "Brahm");
    SpawnNode(random(room_width), random(room_height), "Sidon");
    SpawnNode(random(room_width), random(room_height), "Samarkand");
    SpawnNode(random(room_width), random(room_height), "Kalihar");
    SpawnNode(random(room_width), random(room_height), "Ur");
    SpawnNode(random(room_width), random(room_height), "Sumer");

    x = ds_list_find_value(Node[0], theCounter);
    y = ds_list_find_value(Node[1], theCounter) + 100;
    z = 0;

    // FSM
    fsm_createStateMachine(stateLoop_Update);

    // Camera
    myCamera = instance_create(x, y, CCamera);
    CCamera.x = x;
    CCamera.y = y;
    CCamera.z = 0;
    ResetCamera(id);


    ////#### SYSTEMS ####////

    // Story Systems
    globalvar theStory;
    theStory = 0;

    // Roster Systems
    if (!instance_exists(CClan)) {
        myClan = instance_create(0, 0, CClan);
    } else {
        myClan = CClan;
    }

    // Map Systems
    globalvar theMap;
    theMap = "map_1_1.txt";

    // Inventory Systems
    CreateStorage();

    // Load Game
    LoadGame();


    ////#### MENUS ####////

    theScroll[0] = 0;
    theScroll[1] = 0;
    theScroll[2] = 0;
    theScroll[3] = 0;
    theScroll[4] = 0;
    theScroll[5] = 1;
    theScroll[6] = 0;

    // Menu
    theMenu[0] = ds_list_create();
    ds_list_add(theMenu[0], "Chapter");
    ds_list_add(theMenu[0], "Roster");
    ds_list_add(theMenu[0], "Armoury");
    ds_list_add(theMenu[0], "Shop");
    ds_list_add(theMenu[0], "Save &amp; Quit");
    theChoice[0] = 0;

    // Chapter
    theMenu[1] = ds_list_create();
    ds_list_add(theMenu[1], "Provisions");
    ds_list_add(theMenu[1], "Uneasy Patrols");
    ds_list_add(theMenu[1], "Waylaid");
    ds_list_add(theMenu[1], "Rite of Hostage");
    ds_list_add(theMenu[1], "Trial by Combat");
    ds_list_add(theMenu[1], "Chapter VI");
    ds_list_add(theMenu[1], "Chapter VII");
    ds_list_add(theMenu[1], "Chapter VIII");
    ds_list_add(theMenu[1], "Chapter IX");
    ds_list_add(theMenu[1], "Chapter X");
    ds_list_add(theMenu[1], "Chapter XI");
    ds_list_add(theMenu[1], "Chapter XII");
    ds_list_add(theMenu[1], "Chapter XIII");
    ds_list_add(theMenu[1], "Chapter XIV");
    ds_list_add(theMenu[1], "Chapter XV");
    ds_list_add(theMenu[1], "Chapter XVI");
    theChoice[1] = 0;

    // Armoury
    theChoice[3] = 0;

    // Shop
    theChoice[4] = 0;

    while (ds_list_size(theMenu[1]) &gt; theStory) {
        ds_list_delete(theMenu[1], ds_list_size(theMenu[1]) - 1);
    }

    BufferPrompt("0_The number of Unlocked Story Chapters are [" + string(theStory) + "].");
    DisplayPrompt();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Finite State Machine
    fsm_updateStateMachine(state_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    SaveGame();
    ds_list_destroy(Node[0]);
    ds_list_destroy(Node[1]);
    ds_list_destroy(Node[2]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    SaveGame();
    ds_grid_destroy(CClan.theClan);
    ds_list_destroy(Storage[0]);
    ds_list_destroy(Storage[1]);
    ds_list_destroy(Storage[2]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Loop
{
    if (state_index == stateLoop_Update) {
        // Canvas - Main Loop
        DrawMenu(32, 184, 128, ds_list_size(theMenu[0]), theChoice[0], "Menu");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }

        var i;

        // Menu - Main Loop
        for (i=0; i&lt;ds_list_size(theMenu[0]); i++) {
            draw_set_colour(c_gray);
            if (theChoice[0] == i) {
                draw_set_colour(c_black);
            }
            draw_text(32 + 20, 184 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[0], i));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Chapter
{
    if (state_index == stateLoop_Chapter_1) {
        // Canvas - Main Loop
        DrawMenu(32, 184, 128, 5, theChoice[0], "Menu");
        // Canvas - Chapter
        DrawMenu(48 + 128, 184, room_width - 48 - 128 - 32, min(ds_list_size(theMenu[1]), 5), theChoice[1], "Chapter");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }

        var i;

        // Menu - Main Loop
        for (i=0; i&lt;ds_list_size(theMenu[0]); i++) {
            draw_set_colour(c_gray);
            if (theChoice[0] == i) {
                draw_set_colour(c_black);
            }
            draw_text(32 + 20, 184 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[0], i));
        }

        // Menu - Chapter
        for (i=0; i&lt;min(ds_list_size(theMenu[1]), 5); i++) {
            draw_set_colour(c_gray);
            if (theChoice[1] == i) {
                draw_set_colour(c_black);
            }
            draw_text(48 + 128 + 20, 184 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[1], i + theScroll[1]));
        }

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[1] &gt; 0) {
            draw_text(room_width - 48, 184 + 36, "^");
        }

        if (ds_list_size(theMenu[1]) - theScroll[1] &gt; 5) {
            draw_text(room_width - 48, 184 + 24 + 16 * min(ds_list_size(theMenu[1]), 5), "`");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory 1
{
    if (state_index == stateLoop_Inventory_1) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // TEST
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        if (ds_list_size(Storage[INDEX]) &gt; 0) {
            // Canvas - Inventory
            DrawList(32, 32, 304, min(ds_list_size(Storage[INDEX]), 14), theChoice[3], "Inventory", "Quantity");
            // Canvas - Item Description
            DrawMenu(350, 32, 256, 8, 0, "Item");

            var i, m;

            m = ds_list_size(Storage[INDEX]);
    
            // Menu - Inventory
            for (i=0; i&lt;min(m, 14); i++) {

                draw_set_colour(c_gray);

                if (theChoice[3] == i) {
                    draw_set_colour(c_black);
                }

                var a_qa1 = ds_list_find_value(Storage[QUANTITY], min(i + theScroll[3], ds_list_size(Storage[INDEX]) - 1));
                var a_qa2 = ds_list_find_value(Storage[EQUIPPED], min(i + theScroll[3], ds_list_size(Storage[INDEX]) - 1));
                var a_qa3 = a_qa1 - a_qa2;

                if (a_qa1 &lt; 10) {
                    a_qa1 = " " + string(a_qa1);
                } else {
                    a_qa1 = string(a_qa1);
                }

                if (a_qa3 &lt; 10) {
                    a_qa3 = " " + string(a_qa3);
                } else {
                    a_qa3 = string(a_qa3);
                }

                draw_set_halign(fa_right);
                draw_text(316, 56 + 16 * (i + 1), "(" + string(a_qa3) + ")/" + a_qa1);

                draw_set_halign(fa_left);
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(ds_list_find_value(Storage[INDEX], i + theScroll[3]), 0));
            }

            // Scroller
            draw_set_colour(c_black);

            if (theScroll[3] &gt; 0) {
                draw_text(320, 68, "^");
            }

            if (m - theScroll[3] &gt; 14) {
                draw_text(320, 56 + 16 * min(m, 14), "`");
            }

            // Menu - Item Description
            var a_name, a_desc, a_q, a_a;
            a_name = DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), NAME);
            a_desc = DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), DESCRIPTION);

            draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                        string(a_desc),
                                        -1, 256 - 40);

            draw_set_colour(c_gray);
            draw_text(370, 56 + 16 * 8, "[" + string(theScroll[3] + theChoice[3] + 1) + "/" + string(m) + "]");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[^/`] Cycle / [Z] Sell / [X] Cancel");
            } else {
                DrawFooter("[^/`] Cycle / [A] Sell / [B] Cancel");
            }
        } else {
            // Canvas - Inventory
            DrawList(32, 32, 304, 1, 0, "Menu", "Quantity");

            draw_set_colour(c_black);
            draw_text(52, 72, "Your [Armoury] is presently empty.");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[X] Cancel");
            } else {
                DrawFooter("[B] Cancel");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory 2
{
    if (state_index == stateLoop_Inventory_2) {
        // TEST
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        if (ds_list_size(Storage[INDEX]) &gt; 0) {
            // Canvas - Inventory
            DrawList(32, 32, 304, min(ds_list_size(Storage[INDEX]), 14), theChoice[3], "Inventory", "Quantity");
            // Canvas - Item Description
            DrawMenu(350, 32, 256, 8, 0, "Item");

            var i, m;

            m = ds_list_size(Storage[INDEX]);
    
            // Menu - Inventory
            for (i=0; i&lt;min(m, 14); i++) {

                draw_set_colour(c_gray);

                if (theChoice[3] == i) {
                    draw_set_colour(c_black);
                }

                var a_qa1 = ds_list_find_value(Storage[QUANTITY], i + theScroll[3]);
                var a_qa2 = ds_list_find_value(Storage[EQUIPPED], i + theScroll[3]);
                var a_qa3 = a_qa1 - a_qa2;

                if (a_qa1 &lt; 10) {
                    a_qa1 = " " + string(a_qa1);
                } else {
                    a_qa1 = string(a_qa1);
                }

                if (a_qa3 &lt; 10) {
                    a_qa3 = " " + string(a_qa3);
                } else {
                    a_qa3 = string(a_qa3);
                }

                draw_set_halign(fa_right);
                draw_text(316, 56 + 16 * (i + 1), "(" + string(a_qa3) + ")/" + a_qa1);

                draw_set_halign(fa_left);
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(ds_list_find_value(Storage[INDEX], i + theScroll[3]), 0));
            }

            // Scroller
            draw_set_colour(c_black);

            if (theScroll[3] &gt; 0) {
                draw_text(320, 68, "^");
            }

            if (m - theScroll[3] &gt; 14) {
                draw_text(320, 56 + 16 * min(m, 14), "`");
            }

            // Menu - Item Description
            var a_name, a_desc, a_q, a_a;
            a_name = DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), NAME);
            a_desc = DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), DESCRIPTION);

            draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                        string(a_desc),
                                        -1, 256 - 40);

            draw_set_colour(c_gray);
            draw_text(370, 56 + 16 * 8, "[" + string(theScroll[3] + theChoice[3] + 1) + "/" + string(m) + "]");

            // Shading
            draw_set_alpha(0.5);
            draw_set_colour(c_deepblue);
            draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
            draw_set_alpha(1);

            // Menu - Amount Selection
            DrawList(64, 64, 256, 2, 1, DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), NAME), "");
    
            draw_set_colour(c_black);
            draw_text(64 + 20, 64 + 24 + 16, "How many will you Sell?");

            var a_qn = string(theScroll[5]);
    
            if (theScroll[5] &lt; 10) {
                a_qn = " " + a_qn;
            }
    
            draw_text(64 + 20, 64 + 24 + 32,
                        a_qn + " x " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[INDEX], theScroll[3] + theChoice[3]), PRICE)) +
                        "G = " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[INDEX], theScroll[3] + theChoice[3]), PRICE) * theScroll[5]) +
                        "G");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
            } else {
                DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory 3
{
    if (state_index == stateLoop_Inventory_3) {
        // TEXT
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        if (ds_list_size(Storage[INDEX]) &gt; 0) {
            // Canvas - Inventory
            DrawList(32, 32, 304, min(ds_list_size(Storage[INDEX]), 14), theChoice[3], "Inventory", "Quantity");
            // Canvas - Item Description
            DrawMenu(350, 32, 256, 8, 0, "Item");

            var i, m;

            m = ds_list_size(Storage[INDEX]);

            // Menu - Inventory
            for (i=0; i&lt;min(m, 14); i++) {

                draw_set_colour(c_gray);

                if (theChoice[3] == i) {
                    draw_set_colour(c_black);
                }

                var a_qa1 = ds_list_find_value(Storage[QUANTITY], i + theScroll[3]);
                var a_qa2 = ds_list_find_value(Storage[EQUIPPED], i + theScroll[3]);
                var a_qa3 = a_qa1 - a_qa2;

                if (a_qa1 &lt; 10) {
                    a_qa1 = " " + string(a_qa1);
                } else {
                    a_qa1 = string(a_qa1);
                }

                if (a_qa3 &lt; 10) {
                    a_qa3 = " " + string(a_qa3);
                } else {
                    a_qa3 = string(a_qa3);
                }

                draw_set_halign(fa_right);
                draw_text(316, 56 + 16 * (i + 1), "(" + string(a_qa3) + ")/" + a_qa1);

                draw_set_halign(fa_left);
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(ds_list_find_value(Storage[INDEX], i + theScroll[3]), 0));
            }

            // Scroller
            draw_set_colour(c_black);

            if (theScroll[3] &gt; 0) {
                draw_text(320, 68, "^");
            }

            if (m - theScroll[3] &gt; 14) {
                draw_text(320, 56 + 16 * min(m, 14), "`");
            }

            // Menu - Item Description
            var a_name, a_desc, a_q, a_a;
            a_name = DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), NAME);
            a_desc = DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), DESCRIPTION);

            draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                        string(a_desc),
                                        -1, 256 - 40);

            draw_set_colour(c_gray);
            draw_text(370, 56 + 16 * 8, "[" + string(theScroll[3] + theChoice[3] + 1) + "/" + string(m) + "]");

            // Menu - Amount Selection
            DrawList(64, 64, 256, 2, 1, DBQ_LookItems(ds_list_find_value(Storage[INDEX], theChoice[3] + theScroll[3]), NAME), "");
    
            draw_set_colour(c_black);
            draw_text(64 + 20, 64 + 24 + 16, "How many will you Sell?");

            var a_qn = string(theScroll[5]);
    
            if (theScroll[5] &lt; 10) {
                a_qn = " " + a_qn;
            }
    
            draw_text(64 + 20, 64 + 24 + 32,
                        a_qn + " x " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[INDEX], theScroll[3] + theChoice[3]), PRICE)) +
                        "G = " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[INDEX], theScroll[3] + theChoice[3]), PRICE) * theScroll[5]) +
                        "G");

            // Shading
            draw_set_alpha(0.5);
            draw_set_colour(c_deepblue);
            draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
            draw_set_alpha(1);

            // Menu - Confirmation
            DrawList(96, 96, 256, 2, theScroll[6], "Are you sure?", "");

            draw_set_colour(c_black);
            draw_text(96 + 20, 96 + 24 + 16, "No");
            draw_text(96 + 20, 96 + 24 + 32, "Yes");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
            } else {
                DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop 1
{
    if (state_index == stateLoop_Shop_1) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Shop
        DrawList(32, 32, 304, 14, theChoice[4], "Shop", "Price");
        // Canvas - Item Description
        DrawMenu(350, 32, 256, 8, 0, "Item");
        //TEST
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        var i;

        // Menu - Shop
        for (i=0; i&lt;14; i++) {

            draw_set_colour(c_gray);

            if (theChoice[4] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), string(DBQ_LookItems(i + theScroll[4], PRICE)) + "G");

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(i + theScroll[4], 0));
        }

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[4] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (31 - theScroll[4] &gt; 14) {
            draw_text(320, 56 + 16 * 14, "`");
        }

        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(theChoice[4] + theScroll[4], NAME);
        a_desc = DBQ_LookItems(theChoice[4] + theScroll[4], DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 8, "[" + string(theScroll[4] + theChoice[4] + 1) + "/" + "31]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Buy / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Buy / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop 2
{
    if (state_index == stateLoop_Shop_2) {
        // Canvas - Shop
        DrawList(32, 32, 304, 14, theChoice[4], "Shop", "Price");
        // Canvas - Item Description
        DrawMenu(350, 32, 256, 8, 0, "Item");
        //TEST
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        var i;

        // Menu - Shop
        for (i=0; i&lt;14; i++) {

            draw_set_colour(c_gray);

            if (theChoice[4] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), string(DBQ_LookItems(i + theScroll[4], PRICE)) + "G");

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(i + theScroll[4], 0));
        }

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[4] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (31 - theScroll[4] &gt; 14) {
            draw_text(320, 56 + 16 * 14, "`");
        }

        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(theChoice[4] + theScroll[4], NAME);
        a_desc = DBQ_LookItems(theChoice[4] + theScroll[4], DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 8, "[" + string(theScroll[4] + theChoice[4] + 1) + "/" + "31]");

        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Menu - Amount Selection
        DrawList(64, 64, 256, 2, 1, DBQ_LookItems(theChoice[4] + theScroll[4], NAME), "");

        draw_set_colour(c_black);
        draw_text(64 + 20, 64 + 24 + 16, "How many will you Purchase?");

        var a_qn = string(theScroll[5]);

        if (theScroll[5] &lt; 10) {
            a_qn = " " + a_qn;
        }

        draw_text(64 + 20, 64 + 24 + 32, a_qn + " x " + string(DBQ_LookItems(theScroll[4] + theChoice[4], PRICE)) + "G = " + string(DBQ_LookItems(theScroll[4] + theChoice[4], PRICE) * theScroll[5]) + "G");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop 3
{
    if (state_index == stateLoop_Shop_3) {
        // Canvas - Shop
        DrawList(32, 32, 304, 14, theChoice[4], "Shop", "Price");
        // Canvas - Item Description
        DrawMenu(350, 32, 256, 8, 0, "Item");
        //TEST
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        var i;

        // Menu - Shop
        for (i=0; i&lt;14; i++) {

            draw_set_colour(c_gray);

            if (theChoice[4] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), string(DBQ_LookItems(i + theScroll[4], PRICE)) + "G");

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(i + theScroll[4], 0));
        }

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[4] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (31 - theScroll[4] &gt; 14) {
            draw_text(320, 56 + 16 * 14, "`");
        }

        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(theChoice[4] + theScroll[4], NAME);
        a_desc = DBQ_LookItems(theChoice[4] + theScroll[4], DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 8, "[" + string(theScroll[4] + theChoice[4] + 1) + "/" + "31]");

        // Menu - Amount Selection
        DrawList(64, 64, 256, 2, 1, DBQ_LookItems(theChoice[4] + theScroll[4], NAME), "");

        draw_text(64 + 20, 64 + 24 + 16, "How many will you Purchase?");

        var a_qn = string(theScroll[5]);

        if (theScroll[5] &lt; 10) {
            a_qn = " " + a_qn;
        }

        draw_text(64 + 20, 64 + 24 + 32, a_qn + " x " + string(DBQ_LookItems(theScroll[4] + theChoice[4], PRICE)) + "G = " + string(DBQ_LookItems(theScroll[4] + theChoice[4], PRICE) * theScroll[5]) + "G");

        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Menu - Confirmation
        DrawList(96, 96, 256, 2, theScroll[6], "Are you sure?", "");

        draw_set_colour(c_black);
        draw_text(96 + 20, 96 + 24 + 16, "No");
        draw_text(96 + 20, 96 + 24 + 32, "Yes");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    for (var i = 0; i &lt; ds_list_size(Node[0]); i++) {
        var _x, _y;
        _x = ds_list_find_value(Node[0], i);
        _y = ds_list_find_value(Node[1], i);

        draw_sprite(res_msk_tile, 0, _x, _y);

        if (theCounter == i) {
            draw_sprite(res_iso_cursor, 0, _x, _y);
            draw_sprite(res_iso_cursor_gem, 0, _x, _y + 4 + 4 * sin(state_timer / 8));
        }

        DrawLabel(_x, _y + 8, ds_list_find_value(Node[2], i));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
