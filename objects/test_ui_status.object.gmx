<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Timer
    theTimer = 0;

    // Menu
    theMenu = ds_list_create();
    ds_list_add(theMenu, "Status");
    ds_list_add(theMenu, "Equipment");
    ds_list_add(theMenu, "Abilities");
    ds_list_add(theMenu, "Learn");
    ds_list_add(theMenu, "...");
    theChoice = 0;

    // Finite State Machine
    //fsm_createStateMachine(stateMainMenu_PressStart);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Finite State Machine

    // Timer
    theTimer = max(0, theTimer - 1);

    var _u;

    //_u = myInput.keyD - myInput.keyU;
    _u = keyboard_check(vk_down) - keyboard_check(vk_up);

    if (abs(_u) &gt; 0) {
        if (theTimer == 0) {
            theChoice = max(0, min(theChoice + _u, ds_list_size(theMenu) - 1));
            theTimer = room_speed * 0.1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    DrawCanvas(16, 16, view_wport[0] - 32, view_hport[0] - 52);

    DrawHeading(16 + 16, 16 + 16, 64, "No. 1", false);
    DrawValue(16 + 88, 16 + 16, 112, "Beowulf");

    DrawHeading(16 + 16, 16 + 36, 64, "LV. 1", false);
    DrawValue(16 + 88, 16 + 36, 112, "Warrior");

    DrawHeading(16 + 16, 16 + 56, 64, "Clan", false);
    DrawValue(16 + 88, 16 + 56, 112, "Geats");

    //draw_rectangle(16 + 272 - 64, 16 + 16, 272, 16 + 64, true);
    draw_sprite(res_spr_unit, WARRIOR, 272 - 24, 48 + 24)

    DrawHeading(16 + 288, 16 + 16, 64, "HP", false);
    DrawValue(16 + 288, 16 + 16, 272, "31/31");
    draw_sprite_ext(res_spr_ui1, 0, 16 + 288 + 80, 16 + 16 + 3, 100, 1, 0, c_white, 1);

    DrawHeading(16 + 288, 16 + 36, 64, "AP", false);
    DrawValue(16 + 288, 16 + 36, 272, "20/20");
    draw_sprite_ext(res_spr_ui1, 1, 16 + 288 + 80, 16 + 36 + 3, 100, 1, 0, c_white, 1);

    DrawHeading(16 + 288, 16 + 56, 64, "XP", false);
    DrawValue(16 + 288, 16 + 56, 272, "10/99");
    draw_sprite_ext(res_spr_ui1, 2, 16 + 288 + 80, 16 + 56 + 3, 100, 1, 0, c_white, 1);

    DrawHeading(16 + 16, 16 + 88, 256, "Equipment", true);
    DrawString(16 + 16, 16 + 88 + 16 + 8, 80, "L.Hand", "Steel Buckler");
    DrawString(16 + 16, 16 + 88 + 16 + + 22, 80, "R.Hand", "Silver Sword");
    DrawString(16 + 16, 16 + 88 + 16 + + 38, 80, "Torso", "Mythril Chainmail");

    DrawHeading(16 + 16, 16 + 88 + 78, 256, "Abilities", true);
    DrawString(16 + 16, 16 + 88 + 78 + 16 + 8, 80, "Primary", "Omnislash");
    DrawString(16 + 16, 16 + 88 + 78 + 16 + + 22, 80, "Secondary", "First Aid");
    DrawString(16 + 16, 16 + 88 + 78 + 16 + + 38, 80, "Reaction", "Riposte");
    DrawString(16 + 16, 16 + 88 + 78 + 16 + + 54, 80, "Passive", "Shieldbearer");
    DrawString(16 + 16, 16 + 88 + 78 + 16 + + 70, 80, "Traversal", "Jump +1");

    DrawHeading(16 + 288, 16 + 88, 128, "Base Stats", true);
    DrawVariable(16 + 288, 16 + 88 + 24, 128, "ATK", 99);
    DrawVariable(16 + 288, 16 + 88 + 40, 128, "DEF", 99);
    DrawVariable(16 + 288, 16 + 88 + 56, 128, "POW", 99);
    DrawVariable(16 + 288, 16 + 88 + 72, 128, "RES", 99);

    DrawHeading(16 + 432, 16 + 88 + 92, 64, "MOV", false);
    DrawHeading(16 + 432, 16 + 88 + 112, 64, "JMP", false);
    DrawHeading(16 + 432, 16 + 88 + 132, 64, "SPD", false);

    DrawValue(16 + 432, 16 + 88 + 92, 128, 3);
    DrawValue(16 + 432, 16 + 88 + 112, 128, 2);
    DrawValue(16 + 432, 16 + 88 + 132, 128, 68);

    DrawHeading(16 + 432, 16 + 88, 128, "Stats", true);
    DrawVariable(16 + 432, 16 + 88 + 24, 128, "ATK", 99);
    DrawVariable(16 + 432, 16 + 88 + 40, 128, "DEF", 99);
    DrawVariable(16 + 432, 16 + 88 + 56, 128, "POW", 99);
    DrawVariable(16 + 432, 16 + 88 + 72, 128, "RES", 99);

    // Navigation
    /*
    draw_set_colour(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
    draw_set_alpha(1);
    
    DrawMenu(16, 16, 128, ds_list_size(theMenu), theChoice, "Menu");

    var i;

    for (i=0; i&lt;ds_list_size(theMenu); i++) {
        draw_set_colour(c_gray);
        if (theChoice == i) {
            draw_set_colour(c_black);
        }
        draw_text(16 + 20, 16 + 24 + 16 * (i + 1), theMenu[| i]);
    }
    */

    //if (myInput == myKeyboard) {
        //DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
    //} else {
        DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
