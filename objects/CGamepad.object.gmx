<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-101</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var i;

    for (i=0; i&lt;8; i++) {
        theController[i] = noone;
    }

    isControllerConnected = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    isControllerConnected = instance_exists(CController);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    show_debug_message("Event = " + async_load[? "event_type"]);        // Debug code so you can see which event has been
    show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

    switch(async_load[? "event_type"]) {           // Parse the async_load map to see which event has been triggered
        case "gamepad discovered":                     // A game pad has been discovered
            var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
            gamepad_set_axis_deadzone(pad, 0.5);       // Set the "deadzone" for the axis
            gamepad_set_button_threshold(pad, 0.1);    // Set the "threshold" for the triggers
            if (!instance_exists(theController[pad])) {       // Check to see if an instance is associated with this pad index
                // Create a player object and assign it a pad number
                theController[pad] = instance_create(0, 0, CController);
                with (theController[pad]) {
                    image_index = pad;
                    pad_num = pad;
                }
            }
            isControllerConnected = true;
        break;

    case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
        var pad = async_load[? "pad_index"];       // Get the pad index
        if (instance_exists(theController[pad])) {        // Check for a player instance associated with the pad and remove it
            with (theController[pad]) {
                instance_destroy();
            }
            theController[pad] = noone;                   // Set the controller array to "noone" so it detects a new pad being connected
        }
        isControllerConnected = instance_exists(CController);
    break;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
