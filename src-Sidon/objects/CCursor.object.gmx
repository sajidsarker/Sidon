<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Coordinates
    x = 0;
    y = 0;
    z = 0;

    vecPosition = ds_list_create();
    vecPosition[| X] = 0;
    vecPosition[| Y] = 0;
    vecPosition[| Z] = 0;

    // Flags
    prevX = 0;
    prevY = 0;
    _X_ = 0;
    _Y_ = 0;
    isSelected[0] = noone;
    isSelected[1] = noone;
    theChoice[0] = 0;
    theChoice[1] = 0;
    theMenu[0] = ds_list_create();
    menu[0] = "Move";
    menu[1] = "Attack";
    menu[2] = "Shoot";
    menu[3] = "Ability";
    menu[4] = "Item";
    menu[5] = "Status";
    menu[6] = "Wait";
    menu[7] = "End Turn";
    menu[8] = "Place Companion";
    theMenu[1] = ds_list_create();
    // Abilities, Items

    // Timer
    theTimer = 0;
    theCounter = 0;

    // FSM
    fsm_createStateMachine(stateCursor_Update);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{    
    if (theCounter &gt; 360) {
        theCounter -= 356;
    }

    theCounter++;

    // FSM
    fsm_updateStateMachine(state_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    ds_list_destroy(vecPosition);
    ds_list_destroy(theMenu[0]);
    ds_list_destroy(theMenu[1]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor Command
{
    if (CGame.state_index == stateSystem_Update) {
        if (state_index == stateCursor_Command and ds_list_size(CGame.Scene) == 0) {
            //!(prev_state == stateCursor_Move and CGame.state_index == stateScene_Update)) {
            DrawMenu(32 + 128 * (CGame.debugMe), 32, 128, ds_list_size(theMenu[0]), theChoice[0], "Menu");
            for (var i = 0; i &lt; ds_list_size(theMenu[0]); i++) {
                draw_text(32 + 128 * (CGame.debugMe) + 20, 32 + 24 + 16 * (i + 1), menu[ds_list_find_value(theMenu[0],i)]);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor Status
{
    if (CGame.state_index == stateSystem_Update) {
        if (state_index == stateCursor_Status) {
            DrawMenu(350, 32, 256, 14, 0, "Status");
            
            var j = isSelected[0]._id;
            
            draw_set_colour(c_black);
            draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
            draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));
    
            // Unit
            draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);
    
            // Health
            DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
            DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);
    
            // Aura Points
            DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
            DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);
    
            // Experience Points
            DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
            DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);
    
            // Move
            DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
            DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);
    
            // Jump
            DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
            DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);
    
            // Speed
            DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
            DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);
    
            // Evasion
            DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
            DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);
    
            // Physical Attack
            DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
            DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);
    
            // Physical Defence
            DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
            DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);
    
            // Magic Power
            DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
            DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);
    
            // Magic Resistance
            DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
            DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);
    
            // Weapon Attack
            DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
            DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);
    
            // Equipment Defence
            DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
            DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);
    
            // Weapon Power
            DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
            DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);
    
            // Equipment Resistance
            DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
            DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Update
{
    if (state_index == stateCursor_Update) {
        if (CGame.state_index != stateScene_Update
        and CGame.state_index != stateSystem_Prompt) {
            draw_sprite(res_iso_cursor_gem, image_index, x, y - z - TILE_HEIGHT + sin(theCounter / 8) * 4);
            draw_sprite(res_iso_cursor, 0, x, y - z - TILE_HEIGHT);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Command
{
    if (state_index == stateCursor_Command) {
        if (CGame.state_index != stateScene_Update
        and CGame.state_index != stateSystem_Prompt) {
            //draw_sprite(res_iso_cursor_gem, image_index, x, y - z - TILE_HEIGHT + sin(theCounter / 8) * 4);
            draw_sprite(res_iso_cursor, 0, x, y - z - TILE_HEIGHT);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Move
{
    if (state_index == stateCursor_Move) {
        if (CGame.state_index != stateScene_Update
        and CGame.state_index != stateSystem_Prompt) {
            draw_sprite(res_iso_cursor_gem, image_index, x, y - z - TILE_HEIGHT + sin(theCounter / 8) * 4);
            draw_sprite(res_iso_cursor, 0, x, y - z - TILE_HEIGHT);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Attack
{
    if (state_index == stateCursor_Attack) {
        if (CGame.state_index != stateScene_Update
        and CGame.state_index != stateSystem_Prompt) {
            draw_sprite(res_iso_cursor_gem, image_index, x, y - z - TILE_HEIGHT + sin(theCounter / 8) * 4);
            draw_sprite(res_iso_cursor, 0, x, y - z - TILE_HEIGHT);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Status
{
    if (state_index == stateCursor_Status) {
        if (CGame.state_index != stateScene_Update
        and CGame.state_index != stateSystem_Prompt) {
            //draw_sprite(res_iso_cursor_gem, image_index, x, y - z - TILE_HEIGHT + sin(theCounter / 8) * 4);
            draw_sprite(res_iso_cursor, 0, x, y - z - TILE_HEIGHT);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor Facing
{
    if (state_index == stateCursor_Wait) {
        if (CGame.state_index != stateScene_Update
        and CGame.state_index != stateSystem_Prompt) {
            //draw_sprite(res_iso_cursor_gem, image_index, x, y - z - TILE_HEIGHT + sin(theCounter / 8) * 4);
            draw_sprite(res_iso_cursor, 1 + direction / 90, x, y - z - TILE_HEIGHT * 2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
{
    if (CGame.debugMe) {
        draw_set_colour(c_black);
        if ((ds_grid_get(CMap.myMap[TILE_MAP], vecPosition[| X], vecPosition[| Y])).myFlag[REACHABLE] != false) {
            draw_text(x, y - z - TILE_HEIGHT * 4, (ds_grid_get(CMap.myMap[TILE_MAP], vecPosition[| X], vecPosition[| Y])));
            draw_text(x, y - z - TILE_HEIGHT * 6, (ds_grid_get(CMap.myMap[TILE_MAP], vecPosition[| X], vecPosition[| Y])).x);
            draw_text(x, y - z - TILE_HEIGHT * 3, (ds_grid_get(CMap.myMap[TILE_MAP], vecPosition[| X], vecPosition[| Y])).myParent);
            draw_text(x, y - z - TILE_HEIGHT * 5, ((ds_grid_get(CMap.myMap[TILE_MAP], vecPosition[| X], vecPosition[| Y])).myParent).x);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
