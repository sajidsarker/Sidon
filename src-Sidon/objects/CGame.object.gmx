<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System
{
    particle_system = part_system_create();
    particle_sands  = part_type_create();
    part_type_shape( particle_sands, pt_shape_smoke );
    part_type_size( particle_sands, 1, 3, 0.1, 0.1 );
    part_type_colour_mix( particle_sands, make_colour_rgb(248, 242, 175), make_colour_rgb(242, 227, 140) );
    part_type_gravity( particle_sands, 0.1, 90 );
    part_type_direction( particle_sands, 150, 210, 0, 0 );
    part_type_speed( particle_sands, 0.05, 2, 0.05, 0 );
    part_type_life( particle_sands, Seconds(15), Seconds(30) );
    t_time = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Debug
    show_debug_overlay(false);
    debugMe = false;

    // Music
    //audio_play_sound( res_bgm_battle2, 1, true );

    // Timer
    theTimer = 0;

    // Cache
    myCache = ds_list_create();

    // Scene
    Scene        = ds_list_create();
    SceneTimer   = 0;
    SceneCount   = 6;
    SceneChoice  = 0;
    SceneCounter = 0;
    SceneChoiceActive = false;
    /*
    SceneName[0] = "Call of Dreams";
    SceneName[1] = "Wedding Under the Stars";
    SceneName[2] = "The Caravan";
    SceneName[3] = "Ways of Life";
    SceneName[4] = "Sand and Steel";
    SceneName[5] = "Nations the Dunes Swallowed";
    */

    // Input
    //globalvar myInput;
    myKeyboard   = CKeyboard;
    myGamepad    = CGamepad;
    myController = CController * (instance_exists(CController));
    myInput = myKeyboard;

    // FSM
    /*
        Update
            - Movement
            - Attack
        Cutscene
        Pause
        Game Won
        Game Lost
    */
    fsm_createStateMachine(stateSystem_Update);

    // Turn
    myTurn         = true;
    myPhase        = 0;
    turnCounter[0] = 0;
    turnCounter[1] = 0;
    turnOrder      = ds_list_create();
    turnChoice     = 0;
    turnScroll     = 0;
    actorPointer   = ds_list_create();
    actorSpeed     = ds_list_create();
    myUnitInfo[0]  = noone;
    myUnitInfo[1]  = noone;

    // Faction
    myFaction = 0;

    // Map
    myMap = instance_create(0, 0, CMap);
    
    // Cursor
    myCursor = instance_create(0, 0, CCursor);
    myCursor.vecPosition[| X] = theMap[6];
    myCursor.vecPosition[| Y] = theMap[7];

    // Camera
    myCamera = instance_create(0, 0, CCamera);


    // Roleplaying Systems
    if (!instance_exists(CClan)) {
        myClan = instance_create(0, 0, CClan);
    } else {
        myClan = CClan;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    background_y[0] = view_yview[0];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    background_y[0] = view_yview[0];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System
{
    t_time = max( 0, t_time - 1 );
    if ( t_time == 0 ) {
        repeat (8) {
            part_particles_create( particle_system, irandom_range(-1000, 1000), view_yview[0] + view_hview[0] + 32, particle_sands, 1 );
        }
        t_time = Seconds( irandom_range(1, 4) );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // FSM
    fsm_updateStateMachine(state_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Garbage Collection
    //audio_stop_sound(res_bgm_battle2);
    ClearTurnOrder();
    ds_list_destroy(myCache);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finite State Machine
{
    //draw_text(128, 16, string(CoordToIsoX(mouse_x, mouse_y)) + ", " + string(CoordToIsoY(mouse_x, mouse_y)));
    if (state_index == stateSystem_Pause) {
        show_debug_overlay(false);
        draw_set_alpha(0.8);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);
        DrawHeading(16, 32, 128, "Pause", true);
        DrawString(16, 52, 32, "[!]", "Press [Start] to resume the game.");
        if (myGamepad.isControllerConnected) {
            if (myController != noone) {
                DrawHeading(16, 72, 128, "Input Device", true);
                DrawString(16, 92, 32, "[!]", "Currently logging " + string(gamepad_get_description(myController.pad_num)) + ".");
            }
        } else {
            DrawHeading(16, 72, 128, "Input Device", true);
            DrawString(16, 92, 32, "[!]", "Currently logging Default Keyboard.");
        }
        DrawHeading(16, 112, 128, "Controls", true);
        DrawString( 16, 132, 32, "[?]", "[D] Debug Mode#[S] Cutscene Selection (in Debug Mode)#[C] Spawn Actor#[V] Spawn Enemy Actor#[B] Spawn Prop" );
    }
    
    if (state_index == stateSystem_TurnOrder) {
        draw_set_colour(c_black);
        draw_set_font(Font_H1);
        draw_text(view_wport[0] - 64, 32, CCursor.vecPosition[| Z]);
        DrawValue(view_wport[0] - 70, 44, 0, "Elevation");

        DrawMenu(view_wview[0] * 0.5 - 150, 32, 300, min(ds_list_size(turnOrder), 15), turnChoice, "Turn Order");

        //DrawHeading(view_wview[0] * 0.5, 32, 128, "Turn Order", true);
        var i;
        for (i=0; i&lt;ds_list_size(actorPointer); i++) {
            if (i == turnCounter[0]) {
                DrawString( view_wview[0] * 0.5 - 150 + 16, 52 + (i + 1) * 16, 16, "[!]", "" );
            }
            DrawString( view_wview[0] * 0.5 - 150 + 42, 52 + (i + 1) * 16, 50, "[" + string(actorSpeed[| i]) + "]", actorPointer[| i].BaseStats[NAME] );
        }
    }

    if (state_index == stateSystem_Update) {
        draw_set_colour(c_black);
        draw_set_font(Font_H1);
        draw_text(view_wport[0] - 64, 32, CCursor.vecPosition[| Z]);
        DrawValue(view_wport[0] - 70, 44, 0, "Elevation");

        if (keyboard_check_pressed(ord("D"))) {
            debugMe = !debugMe;
            show_debug_overlay(debugMe);
        }

        if (myPhase == 1) {
            //DrawHeading(view_wview[0] - 16 - string_width("Unit Placement Phase"), 128, 4 + string_width("Unit Placement Phase"), "Unit Placement Phase", true);
            //DrawValueColour(view_wview[0] - 16 - string_width("Unit Placement Phase"), 128 + 16, 128, "Place desired Units on the Battlefield before progressing on to the next Phase.", c_black);
        }
        if (myPhase == 2) {
            //DrawHeading(view_wview[0] - 16 - string_width("Battle Phase"), 128, 4 + string_width("Battle Phase"), "Battle Phase", true);
            //DrawValueColour(view_wview[0] - 16 - string_width("Unit Placement Phase"), 128 + 16, 128, "Place desired Units on the Battlefield before progressing on to the next Phase.", c_black);
        }

        if (debugMe) {
            /*
            if ( SceneChoiceActive ) {
                DrawMenu(32 + 128 + 128 + 16, 32, 256, min(14, SceneCount), SceneChoice, "Cutscene");
                for (var i = 0; i &lt; min(14, SceneCount); i++) {
                    draw_text(32 + 128 + 128 + 16 + 20, 32 + 24 + 16 * (i + 1), SceneName[i + SceneCounter]);
                }
            }
            */

            DrawHeading(16, 32, 128, "Camera", true);
            DrawVariable(16, 48 + 4, 128, "Position X: ", myCursor.vecPosition[| X]);
            DrawVariable(16, 64 + 4, 128, "Position Y: ", myCursor.vecPosition[| Y]);
            DrawVariable(16, 80 + 4, 128, "Position Z: ", myCursor.vecPosition[| Z]);
            DrawVariable(16, 96 + 4, 128, "Camera X: ", myCursor.x);
            DrawVariable(16, 112 + 4, 128, "Camera Y: ", myCursor.y);
            DrawVariable(16, 128 + 4, 128, "Camera Z: ", myCursor.z);
    
            DrawHeading(16, 128 + 24, 128, "Map", true);
            DrawVariable(16, 128 + 32 + 12, 128, "Width: ", myMap.myWidth);
            DrawVariable(16, 128 + 48 + 12, 128, "Height: ", myMap.myHeight);
            DrawVariable(16, 128 + 64 + 12, 128, "Tile Count: ", instance_number(CTile));
            DrawVariable(16, 128 + 80 + 12, 128, "Tile Width: ", TILE_WIDTH);
            DrawVariable(16, 128 + 96 + 12, 128, "Tile Height: ", TILE_HEIGHT);
    
            DrawHeading(16, 128 + 96 + 32, 128, "Input Devices", true);
            DrawVariable(16, 128 + 124 + 24, 128, "Keyboard: ", myKeyboard);
            if (myGamepad.isControllerConnected) {
                DrawVariable(16, 128 + 140 + 24, 128, "Gamepad: ", myGamepad);
            } else {
                DrawVariable(16, 128 + 140 + 24, 128, "Gamepad: ", "No");
            }
            DrawVariable(16, 128 + 156 + 24, 128, "Gamepad Count: ", instance_number(CController));
        }
    }

    DrawFooter(VERSION);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unit Info
{
    if ( state_index == stateSystem_Update ) {
        if ( instance_exists(myCursor) ) {
            if ( myCursor.state_index != stateCursor_Status ) {
                for (var i=0; i&lt;2; i++) {
                    if ( myUnitInfo[i] != noone ) {
                        if ( myUnitInfo[i].object_index != CWorldObject ) {
                            DrawUnitInfo( myUnitInfo[i], i );
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    //bkg = background_index[0];
    ///var time = shader_get_uniform( shader_BlackAndWhite, "u_time" );
    //var time = shader_get_uniform( shader_1, "u_time" );
    //var resolution = shader_get_uniform( shader_1, "u_resolution" );

    ///shader_set( shader_BlackAndWhite );
    //shader_set( shader_1 );
    ///shader_set_uniform_f( time, current_time / 1000 );
    //shader_set_uniform_f( resolution, 640.0, 330.0 );
        //draw_self();
        ///draw_background( res_bkg_intro_1, view_xview[0], view_yview[0] );
        //draw_background( background_index, background_x[0], background_y[0] );
        //draw_background_ext( background_index, background_x[0], background_y[0], room_width, 1, 0, c_white, 1);
    ///shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
