<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Debug
    show_debug_overlay(false);
    
    // Music
    //audio_play_sound(res_bgm_loop1, 1, true);

    // Cache
    myCache = ds_list_create();

    // Input
    myKeyboard = CKeyboard;
    myGamepad  = CGamepad;

    if (instance_exists(CController)) {
        myController = CController;
    } else {
        myController = noone;
    }

    myInput = myKeyboard;

    // Timer
    theTimer = 0;
    theCounter = 0;

    // Node Map
    random_set_seed(current_second * current_day);
    CreateNodeMap();
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Kuvir el-Qarab");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Kuvir el-Haram");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Kuvir el-Khali");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Sidon");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Haasin");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Benraz");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Eram");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Sanuhi");
    SpawnNode(320 + random(4000-640), 180 + random(2500-360), "Sena");

    x = ds_list_find_value(Node[0], theCounter);
    y = ds_list_find_value(Node[1], theCounter) + 100;
    z = 0;

    // FSM
    fsm_createStateMachine(stateLoop_Update);

    // Camera
    myCamera = instance_create(x, y, CCamera);
    CCamera.x = x;
    CCamera.y = y;
    CCamera.z = 0;
    ResetCamera(id);


    ////#### SYSTEMS ####////

    // Story Systems
    globalvar theStory;
    theStory = 0;

    // Roster Systems
    if (!instance_exists(CClan)) {
        myClan = instance_create(0, 0, CClan);
    } else {
        myClan = CClan;
    }

    with (myClan) {
        // Roleplaying Systems
        theClanSize = 0;
        theClan = ds_grid_create(STATS_NUM, CLAN_SIZE);
    }

    // Map Systems
    globalvar theMap;
    theMap = "map_1_1.txt";

    // Inventory Systems
    CreateStorage();

    // Load Game
    LoadGame();
    
    // Temporarily
    AddClanMember("Timuhr", WARRIOR, 3);
    AddClanMember("Balthas", ALCHEMIST, 3);
    AddClanMember("Sidonis", SCHOLAR, 4);
    AddClanMember("Ilyafar", irandom(5), 2);
    AddClanMember("Ramis", irandom(5), 2);
    AddClanMember("Menon", irandom(5), 2);
    AddClanMember("Raz", irandom(5), 2);
    AddClanMember("Abd Emris", irandom(5), 2);
    AddClanMember("Selim", irandom(5), 2);
    AddClanMember("Revaan", irandom(5), 2);
    AddClanMember("Jonos", irandom(5), 2);
    AddClanMember("Khael", irandom(5), 2);
    AddClanMember("Shyam", irandom(5), 2);
    AddClanMember("Faraq", irandom(5), 2);
    AddClanMember("Arshad", irandom(5), 2);
    AddClanMember("Leth", irandom(5), 2);
    AddClanMember("Nivani", irandom(5), 2);
    AddClanMember("Zurhayn", irandom(5), 2);
    AddClanMember("Omar", irandom(5), 2);
    AddClanMember("Qais", irandom(5), 2);

    ////#### MENUS ####////

    theScroll[0] = 0;
    theScroll[1] = 0;
    theScroll[2] = 0;
    theScroll[3] = 0;
    theScroll[4] = 0;
    theScroll[5] = 1;
    theScroll[6] = 0;

    // Menu
    theMenu[0] = ds_list_create();
    ds_list_add(theMenu[0], "Chapter");
    ds_list_add(theMenu[0], "Companions");
    ds_list_add(theMenu[0], "Armoury");
    ds_list_add(theMenu[0], "Shop");
    ds_list_add(theMenu[0], "Save &amp; Quit");
    // Add Reports?
    // Add Caravan?
    theChoice[0] = 0;

    // Chapter
    theMenu[1] = ds_list_create();
    ds_list_add(theMenu[1], "1.  Call of Dreams");
    ds_list_add(theMenu[1], "2.  Wedding Under the Stars");
    ds_list_add(theMenu[1], "3.  The Caravan");
    ds_list_add(theMenu[1], "4.  Ways of Life");
    ds_list_add(theMenu[1], "5.  Sand and Steel");
    ds_list_add(theMenu[1], "6.  Nations the Dunes Swallowed");
    ds_list_add(theMenu[1], "7.  Chapter 7");
    ds_list_add(theMenu[1], "8.  Chapter 8");
    ds_list_add(theMenu[1], "9.  Chapter 9");
    ds_list_add(theMenu[1], "10. Chapter 10");
    ds_list_add(theMenu[1], "11. Chapter 11");
    ds_list_add(theMenu[1], "12. Chapter 12");
    ds_list_add(theMenu[1], "13. Chapter 13");
    ds_list_add(theMenu[1], "14. Chapter 14");
    ds_list_add(theMenu[1], "15. Chapter 15");
    ds_list_add(theMenu[1], "16. Chapter 16");
    theChoice[1] = 0;

    // Roster
    theMenu[2] = ds_list_create();
    ds_list_add(theMenu[2], "Edit Equipment");
    ds_list_add(theMenu[2], "Edit Skills");
    ds_list_add(theMenu[2], "Bio");
    theChoice[2] = 0;

    // Armoury
    theChoice[3] = 0;

    // Shop
    theChoice[4] = 0;

    while (ds_list_size(theMenu[1]) &gt; theStory) {
        ds_list_delete(theMenu[1], ds_list_size(theMenu[1]) - 1);
    }

    BufferPrompt("0_The Number of Unlocked Story Chapters are [" + string(theStory) + "].");
    DisplayPrompt();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Finite State Machine
    fsm_updateStateMachine(state_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    //audio_stop_sound(res_bgm_loop1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    //SaveGame();
    ds_list_destroy(Node[0]);
    ds_list_destroy(Node[1]);
    ds_list_destroy(Node[2]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    SaveGame();
    ds_list_destroy(Storage[0]);
    ds_list_destroy(Storage[1]);
    ds_list_destroy(Storage[2]);
    ds_list_destroy(theMenu[0]);
    ds_list_destroy(theMenu[1]);
    ds_list_destroy(theMenu[2]);
    ds_grid_destroy(CClan.theClan);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Loop
{
    if (state_index == stateLoop_Update) {
        // Canvas - Main Loop
        DrawMenu(32, 184, 128, ds_list_size(theMenu[0]), theChoice[0], "Menu");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }

        var i;

        // Menu - Main Loop
        for (i=0; i&lt;ds_list_size(theMenu[0]); i++) {
            draw_set_colour(c_gray);
            if (theChoice[0] == i) {
                draw_set_colour(c_black);
            }
            draw_text(32 + 20, 184 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[0], i));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Chapter
{
    if (state_index == stateLoop_Chapter_1) {
        // Canvas - Main Loop
        DrawMenu(32, 184, 128, 5, theChoice[0], "Menu");
        // Canvas - Chapter
        DrawMenu(48 + 128, 184, room_width - 48 - 128 - 32, min(ds_list_size(theMenu[1]), 5), theChoice[1], "Chapter");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }

        var i;

        // Menu - Main Loop
        for (i=0; i&lt;ds_list_size(theMenu[0]); i++) {
            draw_set_colour(c_gray);
            if (theChoice[0] == i) {
                draw_set_colour(c_black);
            }
            draw_text(32 + 20, 184 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[0], i));
        }

        // Menu - Chapter
        for (i=0; i&lt;min(ds_list_size(theMenu[1]), 5); i++) {
            draw_set_colour(c_gray);
            if (theChoice[1] == i) {
                draw_set_colour(c_black);
            }
            draw_text(48 + 128 + 20, 184 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[1], i + theScroll[1]));
        }

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[1] &gt; 0) {
            draw_text(room_width - 48, 184 + 36, "^");
        }

        if (ds_list_size(theMenu[1]) - theScroll[1] &gt; 5) {
            draw_text(room_width - 48, 184 + 24 + 16 * min(ds_list_size(theMenu[1]), 5), "`");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 1
{
    if (state_index == stateLoop_Roster_1) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster
        DrawList(32, 32, 304, min(CClan.theClanSize, 14), theChoice[2], "Companions", "Role");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, m;

        m = CClan.theClanSize;

        // Menu - Roster
        for (i=0; i&lt;min(m, 14); i++) {
            draw_set_colour(c_gray);

            if (theChoice[2] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), GetRole(CClan.theClan[# ROLE, i + theScroll[2]], ROLE, 0));

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), CClan.theClan[# NAME, i + theScroll[2]]);
        }

        j = theChoice[2] + theScroll[2];

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[2] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[2] &gt; 14) {
            draw_text(320, 56 + 16 * min(m, 14), "`");
        }

        /*
        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_NAME);
        a_desc = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);
        */

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 2
{
    if (state_index == stateLoop_Roster_2) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster
        DrawList(32, 32, 304, min(CClan.theClanSize, 14), theChoice[2], "Companions", "Role");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, m;

        m = CClan.theClanSize;

        // Menu - Roster
        for (i=0; i&lt;min(m, 14); i++) {
            draw_set_colour(c_gray);

            if (theChoice[2] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), GetRole(CClan.theClan[# ROLE, i + theScroll[2]], ROLE, 0));

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), CClan.theClan[# NAME, i + theScroll[2]]);
        }

        j = theChoice[2] + theScroll[2];

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[2] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[2] &gt; 14) {
            draw_text(320, 56 + 16 * min(m, 14), "`");
        }

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Menu - Edit Selection
        DrawList(64, 64, 256, ds_list_size(theMenu[2]), theScroll[6], CClan.theClan[# NAME, theChoice[2] + theScroll[2]], "");

        draw_set_colour(c_black);
        
        for (i = 0; i &lt; ds_list_size(theMenu[2]); i++) {
            draw_text(64 + 20, 64 + 24 + 16 * (i + 1), ds_list_find_value(theMenu[2], i));
        }

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 3
{
    // Edit Equipment
    if (state_index == stateLoop_Roster_3) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster
        DrawList(32, 32, 304, min(CClan.theClanSize, 14), theScroll[6] + theScroll[5] - 1, "Edit Equipment", "");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, m;

        m = CClan.theClanSize;

        // Menu - Roster - Edit Equipment
        DrawString(49, 53 + 16 * 1, 96, "Weapon", DBQ_LookItems(CClan.theClan[# SLOT1, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 2, 96, "Armour", DBQ_LookItems(CClan.theClan[# SLOT2, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 3, 96, "Favour", DBQ_LookItems(CClan.theClan[# SLOT3, theChoice[2] + theScroll[2]], ITEM_NAME));

        j = theChoice[2] + theScroll[2];

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 3a
{
    // Edit Equipment
    if (state_index == stateLoop_Roster_3a) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster - Edit Equipment - Select Weapon
        DrawList(32, 32, 304, min(CClan.theClanSize, 7), theScroll[6], "Select Weapon", "Quantity");
        // Canvas - Roster - Edit Equipment - Weapon Description
        DrawMenu(32, 32 + (11 * 16), 304, 3, 0, DBQ_LookItems(temp_equipment[| theScroll[5] + theScroll[6]], ITEM_NAME));

        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, k, m, a, b, c;

        m = ds_list_size(temp_equipment);
        j = theChoice[2] + theScroll[2];

        // W.ATK;POW
        var val11, val12, val21, val22;
        val11 = CClan.theClan[# WATK, j];
        val12 = DBQ_LookItems( temp_equipment[| theScroll[5] + theScroll[6]], WATK );
        val21 = CClan.theClan[# WPOW, j];
        val22 = DBQ_LookItems( temp_equipment[| theScroll[5] + theScroll[6]], WPOW );
        DrawHeading( 32 + 16 + 2, 32 + (13 * 16) + 6, 55, "W.ATK", false );
        DrawHeading( 32 + 16 + 2, 32 + (14 * 16) + 8, 55, "W.POW", false );
        DrawValue( 32 + 16 + 2 + 55, 32 + (13 * 16) + 6, 128 - 96, val11 );
        DrawValue( 32 + 16 + 2 + 55, 32 + (14 * 16) + 8, 128 - 96, val21 );
        DrawSelector( 32 + 16 + 2 + 55 + 128 - 96, 32 + (13 * 16) + 8 );
        DrawSelector( 32 + 16 + 2 + 55 + 128 - 96, 32 + (14 * 16) + 10 );
        DrawValueColour( 32 + 16 + 8 + 55 + 128 - 96, 32 + (13 * 16) + 6, 128 - 96, val12, ( val11 &gt; val12 ) * c_red + ( val11 &lt; val12 ) * c_green + ( val11 == val12 ) * c_black );
        DrawValueColour( 32 + 16 + 8 + 55 + 128 - 96, 32 + (14 * 16) + 8, 128 - 96, val22, ( val21 &gt; val22 ) * c_red + ( val21 &lt; val22 ) * c_green + ( val21 == val22 ) * c_black );
        draw_set_colour( c_black );

        // Menu - Roster - Edit Weapons
        for (i=0; i&lt;min(m, 7); i++) {
            draw_set_colour(c_gray);

            if (theScroll[6] == i) {
                draw_set_colour(c_black);
            }

            k = PeekStorage(ds_list_find_value(temp_equipment, i + theScroll[5]));

            if (k &gt; -1) {
                a = ds_list_find_value(Storage[EQUIPPED], k);
                b = ds_list_find_value(Storage[QUANTITY], k);
                c = b - a;

                if (c &lt; 10) {
                    c = " " + string(c);
                }

                if (b &lt; 10) {
                    b = " " + string(b);
                }
            } else {
                a = "";
                b = "";
                c = "";
            }

            draw_set_halign(fa_right);
            if (b != "") {
                draw_text(316, 56 + 16 * (i + 1), "(" + string(c) + ")/" + string(b));
            } else {
                draw_text(316, 56 + 16 * (i + 1), "-");
            }

            draw_set_halign(fa_left);
            if (CClan.theClan[# SLOT1, j] == temp_equipment[| theScroll[5] + i]) {
                draw_text(52, 56 + 16 * (i + 1), "[" + string(DBQ_LookItems(temp_equipment[| theScroll[5] + i], ITEM_NAME)) + "] [E]");
            } else {
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(temp_equipment[| theScroll[5] + i], ITEM_NAME));
            }
        }

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[5] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[5] &gt; 7) {
            draw_text(320, 56 + 16 * min(m, 7), "`");
        }

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(CClan.theClanSize) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 3b
{
    // Edit Equipment
    if (state_index == stateLoop_Roster_3b) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster - Edit Equipment - Select Armour
        DrawList(32, 32, 304, min(CClan.theClanSize, 7), theScroll[6], "Select Armour", "Quantity");
        // Canvas - Roster - Edit Equipment - Armour Description
        DrawMenu(32, 32 + (11 * 16), 304, 3, 0, DBQ_LookItems(temp_equipment[| theScroll[5] + theScroll[6]], ITEM_NAME));
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, k, m, a, b, c;

        m = ds_list_size(temp_equipment);
        j = theChoice[2] + theScroll[2];

        // A.DEF;RES
        var val11, val12, val21, val22;
        val11 = CClan.theClan[# ADEF, j];
        val12 = DBQ_LookItems( temp_equipment[| theScroll[5] + theScroll[6]], ADEF );
        val21 = CClan.theClan[# ARES, j];
        val22 = DBQ_LookItems( temp_equipment[| theScroll[5] + theScroll[6]], ARES );
        DrawHeading( 32 + 16 + 2, 32 + (13 * 16) + 6, 55, "E.DEF", false );
        DrawHeading( 32 + 16 + 2, 32 + (14 * 16) + 8, 55, "E.RES", false );
        DrawValue( 32 + 16 + 2 + 55, 32 + (13 * 16) + 6, 128 - 96, val11 );
        DrawValue( 32 + 16 + 2 + 55, 32 + (14 * 16) + 8, 128 - 96, val21 );
        DrawSelector( 32 + 16 + 2 + 55 + 128 - 96, 32 + (13 * 16) + 8 );
        DrawSelector( 32 + 16 + 2 + 55 + 128 - 96, 32 + (14 * 16) + 10 );
        DrawValueColour( 32 + 16 + 8 + 55 + 128 - 96, 32 + (13 * 16) + 6, 128 - 96, val12, ( val11 &gt; val12 ) * c_red + ( val11 &lt; val12 ) * c_green + ( val11 == val12 ) * c_black );
        DrawValueColour( 32 + 16 + 8 + 55 + 128 - 96, 32 + (14 * 16) + 8, 128 - 96, val22, ( val21 &gt; val22 ) * c_red + ( val21 &lt; val22 ) * c_green + ( val21 == val22 ) * c_black );
        draw_set_colour( c_black );

        // Menu - Roster - Edit Armour
        for (i=0; i&lt;min(m, 7); i++) {
            draw_set_colour(c_gray);

            if (theScroll[6] == i) {
                draw_set_colour(c_black);
            }

            k = PeekStorage(ds_list_find_value(temp_equipment, i + theScroll[5]));

            if (k &gt; -1) {
                a = ds_list_find_value(Storage[EQUIPPED], k);
                b = ds_list_find_value(Storage[QUANTITY], k);
                c = b - a;

                if (c &lt; 10) {
                    c = " " + string(c);
                }

                if (b &lt; 10) {
                    b = " " + string(b);
                }
            } else {
                a = "";
                b = "";
                c = "";
            }

            draw_set_halign(fa_right);
            if (b != "") {
                draw_text(316, 56 + 16 * (i + 1), "(" + string(c) + ")/" + string(b));
            } else {
                draw_text(316, 56 + 16 * (i + 1), "-");
            }

            draw_set_halign(fa_left);
            if (CClan.theClan[# SLOT2, j] == temp_equipment[| theScroll[5] + i]) {
                draw_text(52, 56 + 16 * (i + 1), "[" + string(DBQ_LookItems(temp_equipment[| theScroll[5] + i], ITEM_NAME)) + "] [E]");
            } else {
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(temp_equipment[| theScroll[5] + i], ITEM_NAME));
            }
        }

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[5] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[5] &gt; 7) {
            draw_text(320, 56 + 16 * min(m, 7), "`");
        }

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(CClan.theClanSize) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 4
{
    // Edit Skills
    if (state_index == stateLoop_Roster_4) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster
        DrawList(32, 32, 304, min(CClan.theClanSize, 14), theScroll[6] + theScroll[5] - 1, "Edit Skills", "");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, m;

        m = CClan.theClanSize;

        // Menu - Roster - Edit Equipment
        DrawString(49, 53 + 16 * 1, 96, "Ability1", DBQ_LookItems(CClan.theClan[# ABILITY1, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 2, 96, "Ability2", DBQ_LookItems(CClan.theClan[# ABILITY2, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 3, 96, "Ability3", DBQ_LookItems(CClan.theClan[# ABILITY3, theChoice[2] + theScroll[2]], ITEM_NAME));

        /*
        for (i=0; i&lt;min(m, 14); i++) {
            draw_set_colour(c_gray);

            if (theChoice[2] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), GetRole(CClan.theClan[# ROLE, i + theScroll[2]], ROLE, 0));

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), CClan.theClan[# NAME, i + theScroll[2]]);
        }
        */

        j = theChoice[2] + theScroll[2];

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[2] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[2] &gt; 14) {
            draw_text(320, 56 + 16 * min(m, 14), "`");
        }

        /*
        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_NAME);
        a_desc = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);
        */

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 4a
{
    // Edit Skills
    if (state_index == stateLoop_Roster_4a) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster
        DrawList(32, 32, 304, min(CClan.theClanSize, 14), theScroll[6] + theScroll[5] - 1, "Edit Skills", "");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, m;

        m = CClan.theClanSize;

        // Menu - Roster - Edit Equipment
        DrawString(49, 53 + 16 * 1, 96, "Ability1", DBQ_LookItems(CClan.theClan[# ABILITY1, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 2, 96, "Ability2", DBQ_LookItems(CClan.theClan[# ABILITY2, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 3, 96, "Ability3", DBQ_LookItems(CClan.theClan[# ABILITY3, theChoice[2] + theScroll[2]], ITEM_NAME));

        /*
        for (i=0; i&lt;min(m, 14); i++) {
            draw_set_colour(c_gray);

            if (theChoice[2] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), GetRole(CClan.theClan[# ROLE, i + theScroll[2]], ROLE, 0));

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), CClan.theClan[# NAME, i + theScroll[2]]);
        }
        */

        j = theChoice[2] + theScroll[2];

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[2] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[2] &gt; 14) {
            draw_text(320, 56 + 16 * min(m, 14), "`");
        }

        /*
        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_NAME);
        a_desc = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);
        */

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 4b
{
    // Edit Skills
    if (state_index == stateLoop_Roster_4b) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Roster
        DrawList(32, 32, 304, min(CClan.theClanSize, 14), theScroll[6] + theScroll[5] - 1, "Edit Skills", "");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        var i, j, m;

        m = CClan.theClanSize;

        // Menu - Roster - Edit Equipment
        DrawString(49, 53 + 16 * 1, 96, "Ability1", DBQ_LookItems(CClan.theClan[# ABILITY1, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 2, 96, "Ability2", DBQ_LookItems(CClan.theClan[# ABILITY2, theChoice[2] + theScroll[2]], ITEM_NAME));
        DrawString(49, 53 + 16 * 3, 96, "Ability3", DBQ_LookItems(CClan.theClan[# ABILITY3, theChoice[2] + theScroll[2]], ITEM_NAME));

        /*
        for (i=0; i&lt;min(m, 14); i++) {
            draw_set_colour(c_gray);

            if (theChoice[2] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), GetRole(CClan.theClan[# ROLE, i + theScroll[2]], ROLE, 0));

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), CClan.theClan[# NAME, i + theScroll[2]]);
        }
        */

        j = theChoice[2] + theScroll[2];

        draw_set_colour(c_black);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        // Scroller
        draw_set_colour(c_black);

        if (theScroll[2] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (m - theScroll[2] &gt; 14) {
            draw_text(320, 56 + 16 * min(m, 14), "`");
        }

        /*
        // Menu - Item Description
        var a_name, a_desc, a_q, a_a;
        a_name = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_NAME);
        a_desc = DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_DESCRIPTION);

        draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                    string(a_desc),
                                    -1, 256 - 40);
        */

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Edit / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Edit / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roster 5
{
    if (state_index == stateLoop_Roster_5) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        var j, m;

        j = theChoice[2] + theScroll[2];
        m = CClan.theClanSize;

        // Canvas - Roster
        DrawList(32, 32, 304, 14, 0, CClan.theClan[# NAME, j], "");
        // Canvas - Unit Description
        DrawMenu(350, 32, 256, 14, 0, "Status");

        draw_set_colour(c_black);
        draw_text_ext(52, 56 + 16, "Bio of each individual character goes here.", -1, 264);
        draw_text(370, 56 + 16 * 1, CClan.theClan[# NAME, j]);
        draw_text(370, 56 + 16 * 2, "LV. " + string(CClan.theClan[# LV, j]) + " " + GetRole(CClan.theClan[# ROLE, j], ROLE, 0));

        // Unit
        draw_sprite(res_spr_unit, CClan.theClan[# ROLE, j], 564, 56 + 16 * 1 + 30);

        // Health
        DrawHeading(370, 56 + 16 * 4, 55, "HP", false);
        DrawValue(370 + 8, 56 + 16 * 4, 128 - 32, CClan.theClan[# HP, j]);

        // Aura Points
        DrawHeading(370, 56 + 16 * 5 + 2, 55, "AP", false);
        DrawValue(370 + 8, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# AP, j]);

        // Experience Points
        DrawHeading(370, 56 + 16 * 6 + 4, 55, "XP", false);
        DrawValue(370 + 8, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# XP, j]);

        // Move
        DrawHeading(370 + 128 - 8, 56 + 16 * 4, 55, "MOV", false);
        DrawValue(370 + 128, 56 + 16 * 4, 128 - 32, CClan.theClan[# MOV, j]);

        // Jump
        DrawHeading(370 + 128 - 8, 56 + 16 * 5 + 2, 55, "JMP", false);
        DrawValue(370 + 128, 56 + 16 * 5 + 2, 128 - 32, CClan.theClan[# JMP, j]);

        // Speed
        DrawHeading(370 + 128 - 8, 56 + 16 * 6 + 4, 55, "SPD", false);
        DrawValue(370 + 128, 56 + 16 * 6 + 4, 128 - 32, CClan.theClan[# SPD, j]);

        // Evasion
        DrawHeading(370 + 128 - 8, 56 + 16 * 7 + 6, 55, "EVA", false);
        DrawValue(370 + 128, 56 + 16 * 7 + 6, 128 - 32, CClan.theClan[# EVA, j]);

        // Physical Attack
        DrawHeading(370, 56 + 16 * 8 + 8, 55, "P.ATK", false);
        DrawValue(370 + 8, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# ATK, j]);

        // Physical Defence
        DrawHeading(370, 56 + 16 * 9 + 10, 55, "P.DEF", false);
        DrawValue(370 + 8, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# DEF, j]);

        // Magic Power
        DrawHeading(370, 56 + 16 * 10 + 12, 55, "M.POW", false);
        DrawValue(370 + 8, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# POW, j]);

        // Magic Resistance
        DrawHeading(370, 56 + 16 * 11 + 14, 55, "M.RES", false);
        DrawValue(370 + 8, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# POW, j]);

        // Weapon Attack
        DrawHeading(370 + 128 - 8, 56 + 16 * 8 + 8, 55, "W.ATK", false);
        DrawValue(370 + 128, 56 + 16 * 8 + 8, 128 - 32, CClan.theClan[# WATK, j]);

        // Equipment Defence
        DrawHeading(370 + 128 - 8, 56 + 16 * 9 + 10, 55, "E.DEF", false);
        DrawValue(370 + 128, 56 + 16 * 9 + 10, 128 - 32, CClan.theClan[# ADEF, j]);

        // Weapon Power
        DrawHeading(370 + 128 - 8, 56 + 16 * 10 + 12, 55, "W.POW", false);
        DrawValue(370 + 128, 56 + 16 * 10 + 12, 128 - 32, CClan.theClan[# WPOW, j]);

        // Equipment Resistance
        DrawHeading(370 + 128 - 8, 56 + 16 * 11 + 14, 55, "E.RES", false);
        DrawValue(370 + 128, 56 + 16 * 11 + 14, 128 - 32, CClan.theClan[# ARES, j]);

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 14, "[" + string(j + 1) + "/" + string(m) + "]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[X] Cancel");
        } else {
            DrawFooter("[B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory 1
{
    if (state_index == stateLoop_Inventory_1) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        if (ds_list_size(Storage[ITEM_ID]) &gt; 0) {
            // Canvas - Inventory
            DrawList(32, 32, 304, min(ds_list_size(Storage[ITEM_ID]), 14), theChoice[3], "Inventory", "Quantity");
            // Canvas - Item Description
            DrawMenu(350, 32, 256, 8, 0, "Item");
            // Canvas - Denari
            DrawMenu(350, 32 + 11 * 16 + 14, 256, 1, 0, "Treasury Funds");

            var i, m;

            m = ds_list_size(Storage[ITEM_ID]);
    
            // Menu - Inventory
            for (i=0; i&lt;min(m, 14); i++) {

                draw_set_colour(c_gray);

                if (theChoice[3] == i) {
                    draw_set_colour(c_black);
                }

                var a_qa1 = ds_list_find_value(Storage[QUANTITY], min(i + theScroll[3], ds_list_size(Storage[ITEM_ID]) - 1));
                var a_qa2 = ds_list_find_value(Storage[EQUIPPED], min(i + theScroll[3], ds_list_size(Storage[ITEM_ID]) - 1));
                var a_qa3 = a_qa1 - a_qa2;

                if (a_qa1 &lt; 10) {
                    a_qa1 = " " + string(a_qa1);
                }

                if (a_qa3 &lt; 10) {
                    a_qa3 = " " + string(a_qa3);
                }

                draw_set_halign(fa_right);
                draw_text(316, 56 + 16 * (i + 1), "(" + string(a_qa3) + ")/" + string(a_qa1));

                draw_set_halign(fa_left);
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], i + theScroll[3]), ITEM_NAME));
            }

            // Scroller
            draw_set_colour(c_black);

            draw_text(370, 72 + 11 * 16 + 14, string(Storage[GOLD]) + " Denari");

            if (theScroll[3] &gt; 0) {
                draw_text(320, 68, "^");
            }

            if (m - theScroll[3] &gt; 14) {
                draw_text(320, 56 + 16 * min(m, 14), "`");
            }

            // Menu - Item Description
            var a_name, a_desc, d, a_q, a_a;
            d = ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]);
            a_name = DBQ_LookItems(d, ITEM_NAME);
            a_desc = DBQ_LookItems(d, ITEM_DESCRIPTION);
            //d = theChoice[3] + theScroll[3];

            // Weapons
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 2 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForWeapon(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
                DrawHeading(370, 56 + 16 * 3, 64, "W.ATK", 1);
                DrawHeading(370, 56 + 16 * 4 + 2, 64, "W.POW", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, WATK ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, WPOW ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 5 + 4 )
                }
            }

            // Armour
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 4 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForEquipment(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
                DrawHeading(370, 56 + 16 * 3, 64, "E.DEF", 1);
                DrawHeading(370, 56 + 16 * 4 + 2, 64, "E.RES", 1);
                DrawHeading(370, 56 + 16 * 5 + 4, 64, "WEIGHT", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, ADEF ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, ARES ) );
                DrawValue(370 + 8, 56 + 16 * 5 + 4, 128 - 32, DBQ_LookItems( d, AWGT ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 6 + 6 )
                }
            }

            // Items
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 1 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                            string(a_desc),
                                            -1, 256 - 40);
            }

            draw_set_colour(c_gray);
            draw_text(370, 56 + 16 * 8, "[" + string(theScroll[3] + theChoice[3] + 1) + "/" + string(m) + "]");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[^/`] Cycle / [Z] Sell / [X] Cancel");
            } else {
                DrawFooter("[^/`] Cycle / [A] Sell / [B] Cancel");
            }
        } else {
            // Canvas - Inventory
            DrawList(32, 32, 304, 1, 0, "Menu", "Quantity");
            // Canvas - Gold
            DrawMenu(350, 32, 256, 1, 0, "Treasury Funds");

            draw_set_colour(c_black);
            draw_text(52, 72, "Your [Armoury] is presently empty.");
            draw_text(370, 72, string(Storage[GOLD]) + " Denari");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[X] Cancel");
            } else {
                DrawFooter("[B] Cancel");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory 2
{
    if (state_index == stateLoop_Inventory_2) {
        // TEST
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        if (ds_list_size(Storage[ITEM_ID]) &gt; 0) {
            // Canvas - Inventory
            DrawList(32, 32, 304, min(ds_list_size(Storage[ITEM_ID]), 14), theChoice[3], "Inventory", "Quantity");
            // Canvas - Item Description
            DrawMenu(350, 32, 256, 8, 0, "Item");
            // Canvas - Denari
            DrawMenu(350, 32 + 11 * 16 + 14, 256, 1, 0, "Treasury Funds");

            var i, m;

            m = ds_list_size(Storage[ITEM_ID]);
    
            // Menu - Inventory
            for (i=0; i&lt;min(m, 14); i++) {

                draw_set_colour(c_gray);

                if (theChoice[3] == i) {
                    draw_set_colour(c_black);
                }

                var a_qa1 = ds_list_find_value(Storage[QUANTITY], i + theScroll[3]);
                var a_qa2 = ds_list_find_value(Storage[EQUIPPED], i + theScroll[3]);
                var a_qa3 = a_qa1 - a_qa2;

                if (a_qa1 &lt; 10) {
                    a_qa1 = " " + string(a_qa1);
                }

                if (a_qa3 &lt; 10) {
                    a_qa3 = " " + string(a_qa3);
                }

                draw_set_halign(fa_right);
                draw_text(316, 56 + 16 * (i + 1), "(" + string(a_qa3) + ")/" + string(a_qa1));

                draw_set_halign(fa_left);
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], i + theScroll[3]), ITEM_NAME));
            }

            // Scroller
            draw_set_colour(c_black);

            draw_text(370, 72 + 11 * 16 + 14, string(Storage[GOLD]) + " Denari");

            if (theScroll[3] &gt; 0) {
                draw_text(320, 68, "^");
            }

            if (m - theScroll[3] &gt; 14) {
                draw_text(320, 56 + 16 * min(m, 14), "`");
            }

            // Menu - Item Description
            var a_name, a_desc, d, a_q, a_a;
            d = ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]);
            a_name = DBQ_LookItems(d, ITEM_NAME);
            a_desc = DBQ_LookItems(d, ITEM_DESCRIPTION);
            //d = theChoice[3] + theScroll[3];

            // Weapons
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 2 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForWeapon(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
                DrawHeading(370, 56 + 16 * 3, 64, "W.ATK", 1);
                DrawHeading(370, 56 + 16 * 4 + 2, 64, "W.POW", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, WATK ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, WPOW ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 5 + 4 )
                }
            }

            // Armour
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 4 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForEquipment(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
                DrawHeading(370, 56 + 16 * 3, 64, "E.DEF", 1);
                DrawHeading(370, 56 + 16 * 4 + 2, 64, "E.RES", 1);
                DrawHeading(370, 56 + 16 * 5 + 4, 64, "WEIGHT", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, ADEF ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, ARES ) );
                DrawValue(370 + 8, 56 + 16 * 5 + 4, 128 - 32, DBQ_LookItems( d, AWGT ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 6 + 6 )
                }
            }

            // Items
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 1 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                            string(a_desc),
                                            -1, 256 - 40);
            }

            draw_set_colour(c_gray);
            draw_text(370, 56 + 16 * 8, "[" + string(theScroll[3] + theChoice[3] + 1) + "/" + string(m) + "]");

            // Shading
            draw_set_alpha(0.5);
            draw_set_colour(c_deepblue);
            draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
            draw_set_alpha(1);

            // Menu - Amount Selection
            DrawList(64, 64, 256, 2, 1, DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_NAME), "");
    
            draw_set_colour(c_black);
            draw_text(64 + 20, 64 + 24 + 16, "How many will you Sell?");

            var a_qn = string(theScroll[5]);
    
            if (theScroll[5] &lt; 10) {
                a_qn = " " + string(a_qn);
            }
    
            draw_text(64 + 20, 64 + 24 + 32,
                        a_qn + " x " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theScroll[3] + theChoice[3]), ITEM_PRICE)) +
                        "G = " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theScroll[3] + theChoice[3]), ITEM_PRICE) * theScroll[5]) +
                        "G");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
            } else {
                DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory 3
{
    if (state_index == stateLoop_Inventory_3) {
        // TEXT
        draw_text(16, 16, "GOLD " + string(Storage[GOLD]));

        if (ds_list_size(Storage[ITEM_ID]) &gt; 0) {
            // Canvas - Inventory
            DrawList(32, 32, 304, min(ds_list_size(Storage[ITEM_ID]), 14), theChoice[3], "Inventory", "Quantity");
            // Canvas - Item Description
            DrawMenu(350, 32, 256, 8, 0, "Item");
            // Canvas - Denari
            DrawMenu(350, 32 + 11 * 16 + 14, 256, 1, 0, "Treasury Funds");

            var i, m;

            m = ds_list_size(Storage[ITEM_ID]);

            // Menu - Inventory
            for (i=0; i&lt;min(m, 14); i++) {

                draw_set_colour(c_gray);

                if (theChoice[3] == i) {
                    draw_set_colour(c_black);
                }

                var a_qa1 = ds_list_find_value(Storage[QUANTITY], i + theScroll[3]);
                var a_qa2 = ds_list_find_value(Storage[EQUIPPED], i + theScroll[3]);
                var a_qa3 = a_qa1 - a_qa2;

                if (a_qa1 &lt; 10) {
                    a_qa1 = " " + string(a_qa1);
                }

                if (a_qa3 &lt; 10) {
                    a_qa3 = " " + string(a_qa3);
                }

                draw_set_halign(fa_right);
                draw_text(316, 56 + 16 * (i + 1), "(" + string(a_qa3) + ")/" + string(a_qa1));

                draw_set_halign(fa_left);
                draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], i + theScroll[3]), ITEM_NAME));
            }

            // Scroller
            draw_set_colour(c_black);

            draw_text(370, 72 + 11 * 16 + 14, string(Storage[GOLD]) + " Denari");

            if (theScroll[3] &gt; 0) {
                draw_text(320, 68, "^");
            }

            if (m - theScroll[3] &gt; 14) {
                draw_text(320, 56 + 16 * min(m, 14), "`");
            }

            // Menu - Item Description
            var a_name, a_desc, d, a_q, a_a;
            d = ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]);
            a_name = DBQ_LookItems(d, ITEM_NAME);
            a_desc = DBQ_LookItems(d, ITEM_DESCRIPTION);
            //d = theChoice[3] + theScroll[3];

            // Weapons
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 2 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForWeapon(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
                DrawHeading(370, 56 + 16 * 3, 64, "W.ATK", 1);
                DrawHeading(370, 56 + 16 * 4 + 2, 64, "W.POW", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, WATK ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, WPOW ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 5 + 4 )
                }
            }

            // Armour
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 4 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForEquipment(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
                DrawHeading(370, 56 + 16 * 3, 64, "E.DEF", 1);
                DrawHeading(370, 56 + 16 * 4 + 2, 64, "E.RES", 1);
                DrawHeading(370, 56 + 16 * 5 + 4, 64, "WEIGHT", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, ADEF ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, ARES ) );
                DrawValue(370 + 8, 56 + 16 * 5 + 4, 128 - 32, DBQ_LookItems( d, AWGT ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 6 + 6 )
                }
            }

            // Items
            if ( DBQ_LookItems( d, ITEM_BINARY ) == 1 ) {
                draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                            string(a_desc),
                                            -1, 256 - 40);
            }

            draw_set_colour(c_gray);
            draw_text(370, 56 + 16 * 8, "[" + string(theScroll[3] + theChoice[3] + 1) + "/" + string(m) + "]");

            // Menu - Amount Selection
            DrawList(64, 64, 256, 2, 1, DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theChoice[3] + theScroll[3]), ITEM_NAME), "");
    
            draw_set_colour(c_black);
            draw_text(64 + 20, 64 + 24 + 16, "How many will you Sell?");

            var a_qn = string(theScroll[5]);
    
            if (theScroll[5] &lt; 10) {
                a_qn = " " + string(a_qn);
            }
    
            draw_text(64 + 20, 64 + 24 + 32,
                        string(a_qn) + " x " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theScroll[3] + theChoice[3]), ITEM_PRICE)) +
                        "G = " +
                        string(DBQ_LookItems(ds_list_find_value(Storage[ITEM_ID], theScroll[3] + theChoice[3]), ITEM_PRICE) * theScroll[5]) +
                        "G");

            // Shading
            draw_set_alpha(0.5);
            draw_set_colour(c_deepblue);
            draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
            draw_set_alpha(1);

            // Menu - Confirmation
            DrawList(96, 96, 256, 2, theScroll[6], "Are you sure?", "");

            draw_set_colour(c_black);
            draw_text(96 + 20, 96 + 24 + 16, "No");
            draw_text(96 + 20, 96 + 24 + 32, "Yes");

            // Footer
            if (myInput == myKeyboard) {
                DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
            } else {
                DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop 1
{
    if (state_index == stateLoop_Shop_1) {
        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Canvas - Shop
        DrawList(32, 32, 304, 14, theChoice[4], "Shop", "Price");
        // Canvas - Item Description
        DrawMenu(350, 32, 256, 8, 0, "Item");
        // Canvas - Denari
        DrawMenu(350, 32 + 11 * 16 + 14, 256, 1, 0, "Treasury Funds");

        var i;

        // Menu - Shop
        for (i=0; i&lt;14; i++) {

            draw_set_colour(c_gray);

            if (theChoice[4] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), string(DBQ_LookItems(i + theScroll[4], ITEM_PRICE)) + "D");

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(i + theScroll[4], ITEM_NAME));
        }

        // Scroller
        draw_set_colour(c_black);

        draw_text(370, 72 + 11 * 16 + 14, string(Storage[GOLD]) + " Denari");

        if (theScroll[4] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (200 - theScroll[4] &gt; 14) {
            draw_text(320, 56 + 16 * 14, "`");
        }

        // Menu - Item Description
        var a_name, a_desc, d, a_q, a_a;
        d = theChoice[4] + theScroll[4];
        a_name = DBQ_LookItems(d, ITEM_NAME);
        a_desc = DBQ_LookItems(d, ITEM_DESCRIPTION);

        // Weapons
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 2 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForWeapon(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
            DrawHeading(370, 56 + 16 * 3, 64, "W.ATK", 1);
            DrawHeading(370, 56 + 16 * 4 + 2, 64, "W.POW", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, WATK ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, WPOW ) );
            for ( var f = 0; f &lt; 6; f++ ) {
                draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 5 + 4 )
            }
        }

        // Armour
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 4 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForEquipment(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
            DrawHeading(370, 56 + 16 * 3, 64, "E.DEF", 1);
            DrawHeading(370, 56 + 16 * 4 + 2, 64, "E.RES", 1);
                DrawHeading(370, 56 + 16 * 5 + 4, 64, "WEIGHT", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, ADEF ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, ARES ) );
                DrawValue(370 + 8, 56 + 16 * 5 + 4, 128 - 32, DBQ_LookItems( d, AWGT ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 6 + 6 )
                }
        }

        // Items
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 1 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                        string(a_desc),
                                        -1, 256 - 40);
        }

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 8, "[" + string(theScroll[4] + theChoice[4] + 1) + "/" + "200]");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Buy / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Buy / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop 2
{
    if (state_index == stateLoop_Shop_2) {
        // Canvas - Shop
        DrawList(32, 32, 304, 14, theChoice[4], "Shop", "Price");
        // Canvas - Item Description
        DrawMenu(350, 32, 256, 8, 0, "Item");
        // Canvas - Denari
        DrawMenu(350, 32 + 11 * 16 + 14, 256, 1, 0, "Treasury Funds");

        var i;

        // Menu - Shop
        for (i=0; i&lt;14; i++) {

            draw_set_colour(c_gray);

            if (theChoice[4] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), string(DBQ_LookItems(i + theScroll[4], ITEM_PRICE)) + "D");

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(i + theScroll[4], ITEM_NAME));
        }

        // Scroller
        draw_set_colour(c_black);

        draw_text(370, 72 + 11 * 16 + 14, string(Storage[GOLD]) + " Denari");

        if (theScroll[4] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (200 - theScroll[4] &gt; 14) {
            draw_text(320, 56 + 16 * 14, "`");
        }

        // Menu - Item Description
        var a_name, a_desc, d, a_q, a_a;
        d = theChoice[4] + theScroll[4];
        a_name = DBQ_LookItems(d, ITEM_NAME);
        a_desc = DBQ_LookItems(d, ITEM_DESCRIPTION);

        // Weapons
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 2 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForWeapon(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
            DrawHeading(370, 56 + 16 * 3, 64, "W.ATK", 1);
            DrawHeading(370, 56 + 16 * 4 + 2, 64, "W.POW", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, WATK ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, WPOW ) );
            for ( var f = 0; f &lt; 6; f++ ) {
                draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 5 + 4 )
            }
        }

        // Armour
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 4 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForEquipment(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
            DrawHeading(370, 56 + 16 * 3, 64, "E.DEF", 1);
            DrawHeading(370, 56 + 16 * 4 + 2, 64, "E.RES", 1);
                DrawHeading(370, 56 + 16 * 5 + 4, 64, "WEIGHT", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, ADEF ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, ARES ) );
                DrawValue(370 + 8, 56 + 16 * 5 + 4, 128 - 32, DBQ_LookItems( d, AWGT ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 6 + 6 )
                }
        }

        // Items
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 1 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                        string(a_desc),
                                        -1, 256 - 40);
        }

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 8, "[" + string(theScroll[4] + theChoice[4] + 1) + "/" + "200]");

        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Menu - Amount Selection
        DrawList(64, 64, 256, 2, 1, DBQ_LookItems(theChoice[4] + theScroll[4], ITEM_NAME), "");

        draw_set_colour(c_black);
        draw_text(64 + 20, 64 + 24 + 16, "How many will you Purchase?");

        var a_qn = string(theScroll[5]);

        if (theScroll[5] &lt; 10) {
            a_qn = " " + a_qn;
        }

        draw_text(64 + 20, 64 + 24 + 32, a_qn + " x " + string(DBQ_LookItems(theScroll[4] + theChoice[4], ITEM_PRICE)) + "D = " + string(DBQ_LookItems(theScroll[4] + theChoice[4], ITEM_PRICE) * theScroll[5]) + "D");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop 3
{
    if (state_index == stateLoop_Shop_3) {
        // Canvas - Shop
        DrawList(32, 32, 304, 14, theChoice[4], "Shop", "Price");
        // Canvas - Item Description
        DrawMenu(350, 32, 256, 8, 0, "Item");
        // Canvas - Denari
        DrawMenu(350, 32 + 11 * 16 + 14, 256, 1, 0, "Treasury Funds");

        var i;

        // Menu - Shop
        for (i=0; i&lt;14; i++) {

            draw_set_colour(c_gray);

            if (theChoice[4] == i) {
                draw_set_colour(c_black);
            }

            draw_set_halign(fa_right);
            draw_text(316, 56 + 16 * (i + 1), string(DBQ_LookItems(i + theScroll[4], ITEM_PRICE)) + "D");

            draw_set_halign(fa_left);
            draw_text(52, 56 + 16 * (i + 1), DBQ_LookItems(i + theScroll[4], ITEM_NAME));
        }

        // Scroller
        draw_set_colour(c_black);

        draw_text(370, 72 + 11 * 16 + 14, string(Storage[GOLD]) + " Denari");

        if (theScroll[4] &gt; 0) {
            draw_text(320, 68, "^");
        }

        if (200 - theScroll[4] &gt; 14) {
            draw_text(320, 56 + 16 * 14, "`");
        }

        // Menu - Item Description
        var a_name, a_desc, d, a_q, a_a;
        d = theChoice[4] + theScroll[4];
        a_name = DBQ_LookItems(d, ITEM_NAME);
        a_desc = DBQ_LookItems(d, ITEM_DESCRIPTION);

        // Weapons
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 2 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForWeapon(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
            DrawHeading(370, 56 + 16 * 3, 64, "W.ATK", 1);
            DrawHeading(370, 56 + 16 * 4 + 2, 64, "W.POW", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, WATK ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, WPOW ) );
            for ( var f = 0; f &lt; 6; f++ ) {
                draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 5 + 4 )
            }
        }

        // Armour
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 4 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "#" + string(DBQ_TypeForEquipment(DBQ_LookItems(d, TYPE_BINARY))), -1, 256 - 40);
            DrawHeading(370, 56 + 16 * 3, 64, "E.DEF", 1);
            DrawHeading(370, 56 + 16 * 4 + 2, 64, "E.RES", 1);
                DrawHeading(370, 56 + 16 * 5 + 4, 64, "WEIGHT", 1);
                DrawValue(370 + 8, 56 + 16 * 3, 128 - 32, DBQ_LookItems( d, ADEF ) );
                DrawValue(370 + 8, 56 + 16 * 4 + 2, 128 - 32, DBQ_LookItems( d, ARES ) );
                DrawValue(370 + 8, 56 + 16 * 5 + 4, 128 - 32, DBQ_LookItems( d, AWGT ) );
                for ( var f = 0; f &lt; 6; f++ ) {
                    draw_sprite( res_spr_roles, DBQ_LookItems(d, CLASS_BINARY) &amp; power(2, (5-f)) &gt; 0, 370 + f * 18, 56 + 16 * 6 + 6 )
                }
        }

        // Items
        if ( DBQ_LookItems( d, ITEM_BINARY ) == 1 ) {
            draw_text_ext(370, 56 + 16, string(a_name) + "##" +
                                        string(a_desc),
                                        -1, 256 - 40);
        }

        draw_set_colour(c_gray);
        draw_text(370, 56 + 16 * 8, "[" + string(theScroll[4] + theChoice[4] + 1) + "/" + "200]");

        // Menu - Amount Selection
        DrawList(64, 64, 256, 2, 1, DBQ_LookItems(theChoice[4] + theScroll[4], ITEM_NAME), "");

        draw_text(64 + 20, 64 + 24 + 16, "How many will you Purchase?");

        var a_qn = string(theScroll[5]);

        if (theScroll[5] &lt; 10) {
            a_qn = " " + a_qn;
        }

        draw_text(64 + 20, 64 + 24 + 32, a_qn + " x " + string(DBQ_LookItems(theScroll[4] + theChoice[4], ITEM_PRICE)) + "D = " + string(DBQ_LookItems(theScroll[4] + theChoice[4], ITEM_PRICE) * theScroll[5]) + "D");

        // Shading
        draw_set_alpha(0.5);
        draw_set_colour(c_deepblue);
        draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
        draw_set_alpha(1);

        // Menu - Confirmation
        DrawList(96, 96, 256, 2, theScroll[6], "Are you sure?", "");

        draw_set_colour(c_black);
        draw_text(96 + 20, 96 + 24 + 16, "No");
        draw_text(96 + 20, 96 + 24 + 32, "Yes");

        // Footer
        if (myInput == myKeyboard) {
            DrawFooter("[^/`] Cycle / [Z] Select / [X] Cancel");
        } else {
            DrawFooter("[^/`] Cycle / [A] Select / [B] Cancel");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    for (var i = 0; i &lt; ds_list_size(Node[0]); i++) {
        var _x, _y;
        _x = ds_list_find_value(Node[0], i);
        _y = ds_list_find_value(Node[1], i);

        draw_sprite(res_msk_tile, 0, _x, _y);

        if (theCounter == i) {
            draw_sprite(res_iso_cursor, 0, _x, _y);
            draw_sprite(res_iso_cursor_gem, 0, _x, _y + 4 + 4 * sin(state_timer / 8));
        }

        DrawLabel(_x, _y + 8, ds_list_find_value(Node[2], i));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
