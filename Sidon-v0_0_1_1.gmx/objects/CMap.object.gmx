<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Map
    myWidth  = 25;
    myHeight = 25;

    var i, j;
    var theTile;

    // Layers
    for (i = TILE_MAP; i &lt; ENTITY_MAP + 1; i++) {
        myMap[i] = ds_grid_create(myWidth, myHeight);
    }
    /*
        Tiles
        Height
        Terrain
        Entity
    */

    // Height
    ds_grid_set_region(myMap[HEIGHT_MAP], 0, 0, myWidth - 1, myHeight - 1, 1);

    {
        var f = file_text_open_read(theMap);
            ds_grid_read(myMap[HEIGHT_MAP], file_text_read_string(f));
        file_text_close(f);
    }

    // Tiles
    for (j=0; j&lt;myHeight; j++) {
        for (i=0; i&lt;myWidth; i++) {
            theTile = instance_create(IsoToCoordX(i, j), IsoToCoordY(i, j), CTile);
            ds_grid_set(myMap[TILE_MAP], i, j, theTile);
            theTile.myX = i;
            theTile.myY = j;
            theTile.myZ = ds_grid_get(myMap[HEIGHT_MAP], i, j);
            theTile.z = theTile.myZ * TILE_HEIGHT;
            theTile.depth = -theTile.y;
            theTile = noone;
        }
    }
    
    for (j=0; j&lt;myHeight; j++) {
        for (i=0; i&lt;myWidth; i++) {
            with (ds_grid_get(myMap[TILE_MAP], i, j)) {

                // Right: 0
                if (i + 1 &lt; CMap.myWidth) {
                    myNeighbour[0] = ds_grid_get(CMap.myMap[TILE_MAP], i + 1, j);
                } else {
                    myNeighbour[0] = noone;
                }

                // Up: 1
                if (j - 1 &gt; -1) {
                    myNeighbour[1] = ds_grid_get(CMap.myMap[TILE_MAP], i, j - 1);
                } else {
                    myNeighbour[1] = noone;
                }

                // Left: 2
                if (i - 1 &gt; -1) {
                    myNeighbour[2] = ds_grid_get(CMap.myMap[TILE_MAP], i - 1, j);
                } else {
                    myNeighbour[2] = noone;
                }

                // Down: 3
                if (j + 1 &lt; CMap.myHeight) {
                    myNeighbour[3] = ds_grid_get(CMap.myMap[TILE_MAP], i, j + 1);
                } else {
                    myNeighbour[3] = noone;
                }

            }
        }
    }

    // Terrain
    ds_grid_set_region(myMap[TERRAIN_MAP], 0, 0, myWidth - 1, myHeight - 1, -1);

    // Entities
    ds_grid_set_region(myMap[ENTITY_MAP], 0, 0, myWidth - 1, myHeight - 1, noone);

    SpawnMap();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    with (CTile) {
        instance_destroy();
    }

    // Layers
    for (i = TILE_MAP; i &lt; ENTITY_MAP + 1; i++) {
        ds_grid_destroy(myMap[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
