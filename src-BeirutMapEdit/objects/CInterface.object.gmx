<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    displayCanvas = true;
    theCanvas = instance_create( 0, 0, CCanvas );
    theBrush  = instance_create( 0, 0, CBrush  );
    var theBG = instance_create( 0, 0, CBG );
        theBG.depth = 100000;
    view_xview[0] = IsoToCoordX(0, CCanvas.CanvasHeight) - 150;
    view_yview[0] = IsoToCoordY(0, 0) - 5 * TILE_HEIGHT;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var u, v;
    u = keyboard_check( ord("D") ) - keyboard_check( ord("A") );
    v = keyboard_check( ord("S") ) - keyboard_check( ord("W") );

    if ( abs(u) + abs(v) == 0 ) {
        if ( view_xview[0] &lt; IsoToCoordX(0, CCanvas.CanvasHeight) - 150 ) {
            view_xview[0] = lerp( view_xview[0], IsoToCoordX(0, CCanvas.CanvasHeight)- 150, 0.1 );
        }
        if ( view_xview[0] &gt; IsoToCoordX(CCanvas.CanvasWidth, 0) - view_wview[0] + 200 ) {
            view_xview[0] = lerp( view_xview[0], IsoToCoordX(CCanvas.CanvasWidth, 0) - view_wview[0] + 200, 0.1 );
        }
        if ( view_yview[0] &lt; IsoToCoordY(0, 0) - 35 * TILE_HEIGHT ) {
            view_yview[0] = lerp( view_yview[0], IsoToCoordY(0, 0) - 35 * TILE_HEIGHT, 0.1 );
        }
        if ( view_yview[0] &gt; IsoToCoordY(CCanvas.CanvasWidth, CCanvas.CanvasHeight) - view_hview[0] + 32 ) {
            view_yview[0] = lerp( view_yview[0], IsoToCoordY(CCanvas.CanvasWidth, CCanvas.CanvasHeight) - view_hview[0] + 32, 0.1 );
        }
    }
    if ( abs(u) + abs(v) &gt; 0 ) {
        repeat (10) {
            view_xview[0] += u;
            view_yview[0] += v;
        }
    }
    if ( keyboard_check_pressed( vk_backspace ) ) {
        game_restart();
    }
    if ( keyboard_check_pressed( vk_enter ) ) {
        var data = string(CCanvas.CanvasWidth);
        //data = BufferText(data, string(CCanvas.CanvasWidth));
        data = BufferText(data, string(CCanvas.CanvasHeight));
        data = BufferText(data, string(ds_grid_write(CCanvas.CanvasElevation)));
        data = BufferText(data, string(ds_grid_write(CCanvas.CanvasProps)));
        data = BufferText(data, string(ds_grid_write(CCanvas.CanvasSpawn)));
        var i, j;
        for (j=0; j&lt;CCanvas.CanvasHeight; j++) {
            for (i=0; i&lt;CCanvas.CanvasWidth; i++) {
                data = BufferText(data, string(ds_list_write(CCanvas.CanvasTiles[# i, j])));
            }
        }
        keyboard_string = "";
        clipboard_set_text("");
        clipboard_set_text(data);
        DrawNotification( 5, 600 - 17 - 5, "Copied Data to Clipboard", 4 );
    }
    if ( keyboard_check_pressed( vk_space ) ) {
        DrawNotification( 5, 600 - 17 - 5, "Brush Mode Switched", 4 );
    }
    if ( mouse_wheel_up() ) {
        DrawNotification( 5, 600 - 17 - 5, "Brush Size [+]", 4 );
    }
    if ( mouse_wheel_down() ) {
        DrawNotification( 5, 600 - 17 - 5, "Brush Size [-]", 4 );
    }
    if ( keyboard_check_pressed( vk_up ) ) {
        DrawNotification( 5, 600 - 17 - 5, "Brush Palette [-]", 4 );
    }
    if ( keyboard_check_pressed( vk_down ) ) {
        DrawNotification( 5, 600 - 17 - 5, "Brush Palette [+]", 4 );
    }
    if ( keyboard_check_pressed( vk_backspace ) ) {
        game_restart();
    }
    if ( keyboard_check_pressed( vk_tab ) ) {
        displayCanvas = !displayCanvas;
        DrawNotification( 5, 600 - 17 - 5, "Canvas Display Toggled", 4 );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var colour = make_colour_rgb(255,185,105);
    draw_set_halign( fa_left );
    DrawHeading( 5, 5, "Information", colour );
    DrawText( 5, 32, "Brush X:", c_white );
    DrawText( 5, 48, "Brush Y:", c_white );
    DrawText( 5, 64, "Size:   ", c_white );
    DrawText( 5, 80, "Mode:   ", c_white );
    DrawText( 5, 96, "Save:   ", c_white );
    DrawText( 5, 112, "Reset:  ", c_white );
    DrawText( 5, 128, "Display:  ", c_white );
    DrawText( 5, 144, "Paint:  ", c_white );
    DrawText( 5, 160, "Erase:  ", c_white );
    draw_set_halign( fa_right );
    DrawText( 140, 32, string( theBrush.BrushX ), c_white );
    DrawText( 140, 48, string( theBrush.BrushY ), c_white );
    DrawText( 140, 64, string( theBrush.BrushSize ), c_white );
    DrawText( 140, 80, "[SPACE]", c_white );
    DrawText( 140, 96, "[ENTER]", c_white );
    DrawText( 140, 112, "[BCKSP]", c_white );
    DrawText( 140, 128, "[TAB]", c_white );
    DrawText( 140, 144, "[LMB]", c_white );
    DrawText( 140, 160, "[RMB]", c_white );
    draw_set_halign( fa_left );

    if ( displayCanvas )
        DrawHeading( 150, 5, "Canvas", colour );

    // Elevation
    DrawText( 600, 32, "Elevation: ", c_white );
    DrawText( 600, 48, "[0:" + string(CCanvas.CanvasElevation[# CBrush.BrushX, CBrush.BrushY]) + "]", c_white );
    // Tile Slice
    DrawHeading( 600, 5, "Slice", colour );
    for ( var i = CCanvas.CanvasElevation[# CBrush.BrushX, CBrush.BrushY]; i &gt; 0; i-- ) {
        //DrawText( 600, 64 + i * 16, ds_list_find_value(CCanvas.CanvasTiles[# CBrush.BrushX, CBrush.BrushY], CCanvas.CanvasElevation[# CBrush.BrushX, CBrush.BrushY] - i), c_white );
        draw_sprite(sprite1, ds_list_find_value(CCanvas.CanvasTiles[# CBrush.BrushX, CBrush.BrushY], CCanvas.CanvasElevation[# CBrush.BrushX, CBrush.BrushY] - i) + 1, 600, 48 + i * TILE_HEIGHT );
    }
    // Brush Palette
    DrawText( 700, 48, "[" + string(CBrush.BrushMode) + ":" + string(CCanvas.CanvasProps[# CBrush.BrushX, CBrush.BrushY]) + "]", c_white );
    for ( var i = 0; i &lt; sprite_get_number(sprite1); i++ ) {
        if ( i - 1 == CBrush.BrushPalette ) {
            draw_set_colour(make_colour_rgb(255,110,105));
            draw_rectangle(700, i * 48 + 64, 764, (i + 1) * 48 + 64, false);
            draw_sprite(sprite1, i, 700, i * 48 + 64 );
            //DrawHeading( 700, 64 + (i + 1) * 16, i - 1, make_colour_rgb(255,110,105));
        } else {
            draw_set_colour(c_white);
            draw_sprite(sprite1, i, 700, i * 48 + 64 );
            //DrawText( 700, 64 + (i + 1) * 16, i - 1, (i-1==CBrush.BrushPalette) * colour + (i-1!=CBrush.BrushPalette) * c_white );
        }
    }

    DrawHeading( 700, 5, "Palette", colour );
    DrawText( 700, 32, "Mode: ", c_white );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
