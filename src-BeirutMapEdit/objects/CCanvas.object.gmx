<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    CanvasWidth  = min(25, real(string_digits(get_string("Canvas Width:",  "25"))));
    CanvasHeight = min(25, real(string_digits(get_string("Canvas Height:", "25"))));

    CanvasElevation = ds_grid_create( CanvasWidth, CanvasHeight );
    CanvasProps     = ds_grid_create( CanvasWidth, CanvasHeight );
    CanvasTiles     = ds_grid_create( CanvasWidth, CanvasHeight );
    CanvasSpawn     = ds_grid_create( CanvasWidth, CanvasHeight );

    ds_grid_set_region( CanvasElevation, 0, 0, CanvasWidth - 1, CanvasHeight - 1,  0 );
    ds_grid_set_region( CanvasProps,     0, 0, CanvasWidth - 1, CanvasHeight - 1, -1 );
    ds_grid_set_region( CanvasSpawn,     0, 0, CanvasWidth - 1, CanvasHeight - 1, false );

    for ( var j = 0; j &lt; CanvasHeight; j++ ) {
        for ( var i = 0; i &lt; CanvasWidth; i++ ) {
            CanvasTiles[# i, j] = ds_list_create();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    for ( var j = 0; j &lt; CanvasHeight; j++ ) {
        for ( var i = 0; i &lt; CanvasWidth; i++ ) {
            ds_list_destroy( CanvasTiles[# i, j] );
        }
    }

    ds_grid_destroy( CanvasElevation );
    ds_grid_destroy( CanvasProps );
    ds_grid_destroy( CanvasTiles );
    ds_grid_destroy( CanvasSpawn );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (CInterface.displayCanvas) {
        draw_set_colour( c_dkgray );
        draw_set_alpha(0.75);
        draw_rectangle( 150, 32, 150 + CanvasWidth * 12, 32 + CanvasHeight * 12, false );
        draw_set_alpha(1);
    
        for ( var j = 0; j &lt; CanvasHeight; j++ ) {
            for ( var i = 0; i &lt; CanvasWidth; i++ ) {
                if ( CanvasProps[# i, j] &gt; -1 ) {
                    draw_set_colour( c_red );
                    draw_rectangle( 150 + i * 12, 32 + j * 12, 150 + (i + 1) * 12, 32 + (j + 1) * 12, false );
                    draw_set_colour( c_white );
                }
                if ( CanvasSpawn[# i, j] &gt; 0 ) {
                    draw_set_colour( c_green );
                    draw_rectangle( 150 + i * 12 + 1, 32 + j * 12 + 1, 150 + (i + 1) * 12 - 1, 32 + (j + 1) * 12 - 1, false );
                    draw_set_colour( c_white );
                }
                if ( CanvasElevation[# i, j] &gt; 0 ) {
                    draw_set_colour( c_white );
                    draw_text( 150 + i * 12, 32 + j * 12, CanvasElevation[# i, j] );
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
