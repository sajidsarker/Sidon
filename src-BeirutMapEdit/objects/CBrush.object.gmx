<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    BrushX       =  0;
    BrushY       =  0;
    BrushSizeMin =  1;
    BrushSizeMax =  5;
    BrushSize    =  1;
    BrushPalette = -1;
    BrushMode    =  0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if ( mouse_wheel_up() )
        BrushSize = min( BrushSizeMax, BrushSize + 1 );
    if ( mouse_wheel_down() )
        BrushSize = max( BrushSizeMin, BrushSize - 1 );
    if ( keyboard_check_pressed( vk_up ) )
        BrushPalette--;
    if ( keyboard_check_pressed( vk_down ) )
        BrushPalette++;
    if ( keyboard_check_pressed( vk_space ) )
        BrushMode++;
        if ( BrushMode &gt; 2 )
            BrushMode -= 3;
    BrushPalette = max( -1, BrushPalette );
    if ( CInterface.displayCanvas ) {
        if ( window_mouse_get_x() &gt;= 150 and window_mouse_get_x() &lt;= 150 + CCanvas.CanvasWidth * 12 ) {
            if ( window_mouse_get_y() &gt;= 32 and window_mouse_get_y() &lt;= 32 + CCanvas.CanvasHeight * 12 ) {
                BrushX = max( 0, min( floor( ( window_mouse_get_x() - 150 ) / 12 ), CCanvas.CanvasWidth  - 1 ) );
                BrushY = max( 0, min( floor( ( window_mouse_get_y() - 32  ) / 12 ), CCanvas.CanvasHeight - 1 ) );
                if ( mouse_check_button_pressed( mb_left ) ) {
                    switch ( BrushMode ) {
                        // Tile Paint Mode
                        case 0:
                            for ( var j = BrushY - BrushSize + 1; j &lt; BrushY + BrushSize; j++ ) {
                                for ( var i = BrushX - BrushSize + 1; i &lt; BrushX + BrushSize; i++ ) {
                                    if ( j &gt;= 0 and j &lt; CCanvas.CanvasHeight ) {
                                        if ( i &gt;= 0 and i &lt; CCanvas.CanvasWidth ) {
                                            CCanvas.CanvasElevation[# i, j]++;
                                            ds_list_add( CCanvas.CanvasTiles[# i, j], BrushPalette );
                                            SpawnTile(i, j, CCanvas.CanvasElevation[# i, j], BrushPalette);
                                        }
                                    }
                                }
                            }
                        break;

                        // Props Paint Mode
                        case 1:
                            ds_grid_set_region( CCanvas.CanvasProps, max(0, BrushX - BrushSize + 1), max(0, BrushY - BrushSize + 1), min(CCanvas.CanvasWidth - 1, BrushX + BrushSize - 1), min(CCanvas.CanvasHeight - 1, BrushY + BrushSize - 1 ), BrushPalette );
                        break;

                        // Spawn Paint Mode
                        case 2:
                            ds_grid_set_region( CCanvas.CanvasSpawn, max(0, BrushX - BrushSize + 1), max(0, BrushY - BrushSize + 1), min(CCanvas.CanvasWidth - 1, BrushX + BrushSize - 1), min(CCanvas.CanvasHeight - 1, BrushY + BrushSize - 1 ), true );
                        break;
                    }
                }
                if ( mouse_check_button_pressed( mb_right ) ) {
                    switch ( BrushMode ) {
                        // Tile Erase Mode
                        case 0:
                            for ( var j = BrushY - BrushSize + 1; j &lt; BrushY + BrushSize; j++ ) {
                                for ( var i = BrushX - BrushSize + 1; i &lt; BrushX + BrushSize; i++ ) {
                                    if ( j &gt;= 0 and j &lt; CCanvas.CanvasHeight ) {
                                        if ( i &gt;= 0 and i &lt; CCanvas.CanvasWidth ) {
                                            CCanvas.CanvasElevation[# i, j]--;
                                            CCanvas.CanvasElevation[# i, j] = max(0, CCanvas.CanvasElevation[# i, j]);
                                            ds_list_delete( CCanvas.CanvasTiles[# i, j], CCanvas.CanvasElevation[# i, j] );
                                            DespawnTile(i, j, CCanvas.CanvasElevation[# i, j]);
                                            //SpawnTile(i, j, CCanvas.CanvasElevation[# i, j], BrushPalette);
                                        }
                                    }
                                }
                            }
                        break;

                        // Props Erase Mode
                        case 1:
                            ds_grid_set_region( CCanvas.CanvasProps, max(0, BrushX - BrushSize + 1), max(0, BrushY - BrushSize + 1), min(CCanvas.CanvasWidth - 1, BrushX + BrushSize - 1), min(CCanvas.CanvasHeight - 1, BrushY + BrushSize - 1 ), -1 );
                        break;

                        // Spawn Erase Mode
                        case 2:
                            ds_grid_set_region( CCanvas.CanvasSpawn, max(0, BrushX - BrushSize + 1), max(0, BrushY - BrushSize + 1), min(CCanvas.CanvasWidth - 1, BrushX + BrushSize - 1), min(CCanvas.CanvasHeight - 1, BrushY + BrushSize - 1 ), false );
                        break;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if ( CInterface.displayCanvas ) {
        if ( window_mouse_get_x() &gt;= 150 and window_mouse_get_x() &lt;= 150 + CCanvas.CanvasWidth * 12 ) {
            if ( window_mouse_get_y() &gt;= 32 and window_mouse_get_y() &lt;= 32 + CCanvas.CanvasHeight * 12 ) {
                draw_set_colour( c_black );
                draw_rectangle( max( 150, 150 + BrushX * 12 - (BrushSize - 1) * 12 ), max( 32, 32 + BrushY * 12 - (BrushSize - 1) * 12 ), min( 150 + CCanvas.CanvasWidth * 12, 150 + BrushX * 12 + BrushSize * 12 ), min( 32 + CCanvas.CanvasHeight * 12, 32 + BrushY * 12 + BrushSize * 12 ), true );
                draw_rectangle( max( 150, 150 + BrushX * 12 ), max( 32, 32 + BrushY * 12 ), min( 150 + CCanvas.CanvasWidth * 12, 150 + BrushX * 12 + 12 ), min( 32 + CCanvas.CanvasHeight * 12, 32 + BrushY * 12 + 12 ), true );
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
